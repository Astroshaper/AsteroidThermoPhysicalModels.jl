var documenterSearchIndex = {"docs":
[{"location":"#ThermoPhysicalModeling.jl","page":"Home","title":"ThermoPhysicalModeling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for dynamical simulation of an asteroid.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ThermoPhysicalModeling]","category":"page"},{"location":"#ThermoPhysicalModeling.CERES","page":"Home","title":"ThermoPhysicalModeling.CERES","text":"Ceres\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.DIDYMOS","page":"Home","title":"ThermoPhysicalModeling.DIDYMOS","text":"Asteroid 65803 Didymos (1996 GT)\n\nPhysical parameters\n\n:GM : GM\n:M  : Mass\n:μ  : Standard gravitational parameter about Sun and Ryugu\n\nOrbital elements\n\n:a  : Semi-mojor axis [AU]\n:e  : Eccentricity [-]\n:I  : Inclination [deg]\n:Ω  : Longitude of the ascending node [deg]\n:ω  : Argument of periapsis [deg]\n:Φ  : # Mean anomaly [deg]\n\nSpin parameters\n\n:α  : Right ascension (RA) in equatorial coordinate system [deg]\n:δ  : Declination (Dec) in equatorial coordinate system [deg]\n:P  : Rotation period [h]\n\nReferences\n\nSmall Body Database Lookup: https://ssd.jpl.nasa.gov/tools/sbdb_lookup.html#/?sstr=didymos\nNaidu et al. (2020)\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.DIMORPHOS","page":"Home","title":"ThermoPhysicalModeling.DIMORPHOS","text":"Dimorphos\n\n:a : Semi-major axis of the mutual orbit with Dimorphos [m]\n:P : Rotation periof of the mutual orbit with Dimorphos [h]\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.EARTH","page":"Home","title":"ThermoPhysicalModeling.EARTH","text":"Earth\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.ERIS","page":"Home","title":"ThermoPhysicalModeling.ERIS","text":"Eris\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.JUPITER","page":"Home","title":"ThermoPhysicalModeling.JUPITER","text":"Jupiter\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.MARS","page":"Home","title":"ThermoPhysicalModeling.MARS","text":"Mars\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.MERCURY","page":"Home","title":"ThermoPhysicalModeling.MERCURY","text":"Mercury\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.MOON","page":"Home","title":"ThermoPhysicalModeling.MOON","text":"Moon\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.NEPTUNE","page":"Home","title":"ThermoPhysicalModeling.NEPTUNE","text":"Neptune\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.PLUTO","page":"Home","title":"ThermoPhysicalModeling.PLUTO","text":"Pluto\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.RYUGU","page":"Home","title":"ThermoPhysicalModeling.RYUGU","text":"Asteroid 162173 Ryugu\n\nPhysical parameters\n\n:GM : GM\n:M  : Mass\n:μ  : Standard gravitational parameter about Sun and Ryugu\n\nOrbital elements\n\n:a  : Semi-mojor axis [AU]\n:e  : Eccentricity [-]\n:I  : Inclination [deg]\n:Ω  : Longitude of the ascending node [deg]\n:ω  : Argument of periapsis [deg]\n:Φ  : # Mean anomaly [deg]\n\nSpin parameters\n\n:α  : Right ascension (RA) in equatorial coordinate system [deg]\n:δ  : Declination (Dec) in equatorial coordinate system [deg]\n:P  : Rotation period [h]\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.SATURN","page":"Home","title":"ThermoPhysicalModeling.SATURN","text":"Saturn\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.URANUS","page":"Home","title":"ThermoPhysicalModeling.URANUS","text":"Uranus\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.VENUS","page":"Home","title":"ThermoPhysicalModeling.VENUS","text":"Venus\n\n\n\n\n\n","category":"constant"},{"location":"#ThermoPhysicalModeling.Binary","page":"Home","title":"ThermoPhysicalModeling.Binary","text":"mutable struct Binary{T1, T2, T3, T4}\n\nDescribe the state of a binary asteroid\n\nFields\n\nshape1 : Shape model of the primary\nshape2 : Shape model of the secondary\norbit        : Orbital elements of the primary\nmutual_orbit : Mutual orbit parametes\nspin1 : Spin parameters of the primary\nspin2 : Spin parameters of the secondary\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.Facet","page":"Home","title":"ThermoPhysicalModeling.Facet","text":"struct Face{T1, T2, T3, T4, T5, T6}\n\nTriangular surface facet of a polyhedral shape model.\n\nNote that the mesh normal indicates outward the polyhedron.\n\nFields\n\nA::T1 : Position of 1st vertex\nB::T1 : Position of 2nd vertex\nC::T1 : Position of 3rd vertex\ncenter::T1 : Position of mesh center\nnormal::T1 : Normal vector to mesh\narea  ::T2   : Area of mesh\nvisiblefacets::T3 : 1-D array of VisibleFacet\nflux         ::T4 : Energy flux from surrounding facets\ntemps        ::T5 : Temperature profile in depth direction\n_temps_      ::T5 : Pre-allocated vector for updating temperature profile\nforce        ::T6 : Photon recoil force\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.Flux","page":"Home","title":"ThermoPhysicalModeling.Flux","text":"mutable struct Flux{T}\n\nEnergy flux to a facet\n\nFields\n\nsun ::T : Flux of solar radiation,    F_sun\nscat::T : Flux of scattered sunlight, F_scat\nrad ::T : Flux of thermal radiation,  F_rad\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.HermiteParticle","page":"Home","title":"ThermoPhysicalModeling.HermiteParticle","text":"Particle{T1 <: AbstractVector, T2 <: Real} <: AbstractParticle\n\nPaticle for N-body simulation (4th-degree Hermite integrator)\n\nFields\n\nr   # Position\nv   # Velocity\na   # Acceleration\na¹  # 1st dervative of acceleration (jerk)\na²  # 2nd dervative of acceleration\na³  # 3rd dervative of acceleration\n⁺r   # Position at next timestep\n⁺v   # Velocity at next timestep\n⁺a   # Acceleration at next timestep\n⁺a¹  # 1st dervative of acceleration at next timestep\n⁺a²  # 2nd dervative of acceleration at next timestep\n⁺a³  # 3rd dervative of acceleration at next timestep\nm   # Mass of the particle\nR   # Radius of the particle\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.MutualOrbit","page":"Home","title":"ThermoPhysicalModeling.MutualOrbit","text":"mutable struct MutualOrbit{T1}\n\nMutual orbit parameters of a binary asteroid\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.OrbitalElements","page":"Home","title":"ThermoPhysicalModeling.OrbitalElements","text":"Orbital elements\n\na  : Semi-major axis\ne  : Eccentricity\nI  : Inclination\nω  : Argument of periapsis\nΩ  : Longitude of ascending node\nΦ  : Mean anomaly (tₚ = - Φ / n)\ntₚ  : Periapsis passage time\nμ  : Standard gravitational parameter of the system (GM)\nn  : Mean motion    : n = √(μ / a^3)\nP  : Orbital period : T = 2π / n\n\nTime-variables\n\nt  : Time\nu  : Eccentric anomaly\nν  : True anomaly\nr  : Position in the orbital plane frame (located at the focus of the ellipse)\nv  : Velocity in the orbital plane frame (located at the focus of the ellipse)\nF☉ : Solar irradiation at the orbit [W/m²]\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.ShapeModel","page":"Home","title":"ThermoPhysicalModeling.ShapeModel","text":"ShapeModel{T1, T2, T3, T4, T5, T6, T7}\n\nA polyhedral shape model of an asteroid.\n\nFields\n\nnum_node   : Number of nodes\nnum_face   : Number of faces\nnodes      : 1-D array of node positions\nfaces      : 1-D array of vertex indices of faces\nfacets     : 1-D array of surface facets (Facet)\nAREA       : Surface area\nVOLUME     : Volume\nRADIUS_EQ  : Equivalent radius of a sphere with the same volume\nRADIUS_MAX : Maximum radius\nRADIUS_MIN : Minimum radius\nCOF        : Center-of-figure\nMOI        : Moment of inertia tensor\nforce      : Thermal recoil force at body-fixed frame (Yarkovsky effect)\ntorque     : Thermal recoil torque at body-fixed frame (YORP effect)\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.SimpleParticle","page":"Home","title":"ThermoPhysicalModeling.SimpleParticle","text":"SimpleParticle{T1 <: AbstractVector, T2 <: Real} <: AbstractParticle\n\nPaticle for N-body simulation (e.g. Euler or leapfrog integrator)\n\nFields\n\nr   # Position\nv   # Velocity\na   # Acceleration\nm   # Mass of the particle\nR   # Radius of the particle\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.SpinParams","page":"Home","title":"ThermoPhysicalModeling.SpinParams","text":"SpinParams{T1, T2}\n\nSpin parameters of an asteroid\n\nFields\n\nSpin pole @ Equatorial coordinate\n\nα  : Right ascension (RA)\nδ  : Declination (Dec)\n\nSpin pole @ Ecliptic coordinate\n\nλ  : Ecliptic longitude\nβ  : Ecliptic latitude\n\nOther parameters\n\nP  : Spin period [sec]\nω  : Angular velocity [rad/sec]\nŝ  : Spin pole direction (normalized)\nε  : Obliquity\nγ  : ernal equinox lon. from the direction of perihelion\nt  : Time\nϕ₀ : Initial spin phase\nϕ  : Spin phase angle\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.ThermoParams","page":"Home","title":"ThermoPhysicalModeling.ThermoParams","text":"struct ThermoParams{COMMON_INT, COMMON_FLOAT, FACET_INT, FACET_FLOAT}\n\nFields\n\nA_B   : Bond albedo\nA_TH  : Albedo at thermal radiation wavelength\nk     : Thermal conductivity [W/m/K]\nρ     : Material density [kg/m³]\nCp    : Heat capacity [J/kg/K]\nϵ     : Emissivity\nt_bgn : Start time of the simulation, normalized by period P\nt_end : End time of the simulation, normalized by period P\nΔt    : Non-dimensional timesteps, normalized by period P\nNt    : Number of timesteps\nz_max : Maximum depth for thermophysical simualtion, normalized by thermal skin depth l\nΔz    : Non-dimensional step in depth, normalized by thermal skin depth l\nNz    : Number of depth steps\nP     : Cycle of thermal cycle (rotation period) [sec]\nl     : Thermal skin depth [m]\nΓ     : Thermal inertia [J ⋅ m⁻² ⋅ K⁻¹ ⋅ s⁻⁰⁵ (tiu)]\nλ     : Non-dimensional coefficient for heat diffusion equation\n\nParametic types\n\nCOMMON_INT   : Integer-typed property common for all facets\nCOMMON_FLOAT : Float-typed property common for all facets\nFACET_INT    : Integer common for all facets or array giving an integer for each facet individually\nFACET_FLOAT  : Float common for all facets or array giving a float for each facet individually\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.VisibleFacet","page":"Home","title":"ThermoPhysicalModeling.VisibleFacet","text":"struct VisibleFacet{T1, T2, T3}\n\nIndex of an interfacing facet and its view factor\n\nFields\n\nid : Index of the interfacing facet\nf  : View factor from facet i to j\nd  : Distance from facet i to j\nd̂  : Normal vector from facet i to j\n\n\n\n\n\n","category":"type"},{"location":"#ThermoPhysicalModeling.YORP_timescale-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.YORP_timescale","text":"YORP_timescale(P_start, P_end, ω̇) -> timescale\n\nCaluculate the YORP time scale given a constant acceleration/deceleration\n\nParameters\n\nP_start [hour]\nP_end   [hour]\nω̇       [deg/day/day]\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.analyze_YORP-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.analyze_YORP","text":"analyze_YORP(df, spin, MOI)\n\nParameters\n\ndf   : Dataframe of timestamp\nspin : SpinParams\nC    : Moment of inertia\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.autumnal_equinox_lon-Tuple{SpinParams}","page":"Home","title":"ThermoPhysicalModeling.autumnal_equinox_lon","text":"autumnal_equinox_lon(spin::SpinParams) -> γ_autum\n\nGet a longitude of the autumnal equinox with respect to the perihelion\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.body_to_orbit-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.body_to_orbit","text":"body_to_orbit(v, spin::SpinParams) -> v\nbody_to_orbit(v, γ, ε, ϕ)          -> v\n\nParameters\n\nv : vector in the body-fixed frame\nγ : longitude of vernal equinox direction of the body\nε : obliquity of the spin pole\nϕ : spin phase of the body\n\nReturn\n\nv : vector in the orbital plane frame\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.center_of_figure-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.center_of_figure","text":"center_of_figure(facets) -> COF\n\nCalculate center-of-figure position of a polyhedral\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.drift_rate_ȧ-Tuple{AbstractVector, Real, OrbitalElements}","page":"Home","title":"ThermoPhysicalModeling.drift_rate_ȧ","text":"a     : Acceleration\nu     : Eccentric anomaly\norbit : OrbitalElements\n\nReturn\n\nȧ : Drift rate in semi-major axis\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.eclipse_is_possible-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.eclipse_is_possible","text":"The secondary is within the critical angle to detect an eclipse event.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.energy_in-Tuple{ShapeModel, ThermoParams}","page":"Home","title":"ThermoPhysicalModeling.energy_in","text":"energy_in(shape::ShapeModel, params::ThermoParams) -> E_in\nenergy_in(shape::ShapeModel, A_B::AbstractVector ) -> E_in\nenergy_in(shape::ShapeModel, A_B::Real           ) -> E_in\nenergy_in(facet::Facet,      A_B::Real           ) -> E_in\n\nInput energy per second at a certain time [W]\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.energy_io-Tuple{ShapeModel, ThermoParams}","page":"Home","title":"ThermoPhysicalModeling.energy_io","text":"energy_io(shape::ShapeModel, params::ThermoParams) -> E_in, E_out, E_cons\n\nInput and output energy per second at a certain time\n\nReturns\n\nE_in   : Input energy per second at a certain time [W]\nE_out  : Output enegey per second at a certain time [W]\nE_cons : Output-input energy ratio (E_out / E_in)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.energy_out-Tuple{ShapeModel, ThermoParams}","page":"Home","title":"ThermoPhysicalModeling.energy_out","text":"energy_out(shape::ShapeModel, params::ThermoParams                   ) -> E_out\nenergy_out(shape::ShapeModel, ϵ::AbstractVector, A_TH::AbstractVector) -> E_out\nenergy_out(shape::ShapeModel, ϵ::Real,           A_TH::Real          ) -> E_out\nenergy_out(facet::Facet,      ϵ::Real,           A_TH::Real          ) -> E_out\n\nOutput enegey per second at a certain time [W]\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.eq2ec-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.eq2ec","text":"eq2ec(α, δ) -> λ, β\n\nCoordinate transform from the equatorial to ecliptic coordinate systems\n\nArguments\n\nα: right ascension (RA)\nδ: declination (Dec)\n\nReturns\n\nλ: ecliptic longitude\nβ: ecliptic latitude\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.evaluate_Euler!-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.evaluate_Euler!","text":"⁺aᵢ : Particle i at next step\npᵢ  : Particle i\npⱼ  : Particle j\nϵ   : Softening parameter\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.findVisibleFacets!-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.findVisibleFacets!","text":"findVisibleFacets!(facets)\n\nFind facets that is visible from each facet\n\nParameters\n\nfacets : Array of Facet\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.findVisibleFacets!-Tuple{ThermoPhysicalModeling.Facet, Any}","page":"Home","title":"ThermoPhysicalModeling.findVisibleFacets!","text":"findVisibleFacets!(obs::Facet, facets)\n\nFind facets that is visible from the facet where the observer is located.\n\nParameters\n\nobs    : Facet where the observer stands\nfacets : Array of Facet\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.find_eclipse!-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.find_eclipse!","text":"find_eclipse!(shapes, sun_from_pri, sec_from_pri, R₂₁)\n\nshapes\nsun_from_pri\nsec_from_pri : Position of the secondary relative to primary\nR₂₁          : Rotation matrix from secondary to primary\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.flux_total-Tuple{ShapeModel, AbstractVector, AbstractVector}","page":"Home","title":"ThermoPhysicalModeling.flux_total","text":"flux_total(shape::Shape, A_B::AbstractVector, A_TH::AbstractVector) -> F_total\nflux_total(facet::Facet, A_B::Real,           A_TH::Real)           -> F_total\n\nArguments\n\nshape : Shape model (Shape)\nfacet : Surface facet (Facet)\nA_B   : Bond albedo\nA_TH  : Albedo in thermal infrared wavelength\n\nTotal energy absorbed by the facet\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getBaryCenter-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.getBaryCenter","text":"getBaryCenter(ps) -> r_G, v_G, a_G\n\nPosition, velocity and acceleration of the system's barycenter\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getEdgeFactor-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getEdgeFactor","text":"getEdgeFactor(r_i, r_j) -> L_e\n\nCalculate a edge factor, L_e\n\nArguments\n\nr_i : start-point of the edge\nr_j : end-point of the edge\npos : position where you want the gravity (if skipped, the origin is given)\n\nReturns\n\nL_e: edge factor\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getFaceAreas-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getFaceAreas","text":"getFaceAreas(topology, points) -> faceareas\n\nGet an array of areas of all faces\n\nArguments\n\ntopology : Topology instace of HalfEdges.jl\npoints   : vertex-list of the polyhedron\n\nReturn\n\nfaceareas : array of areas of faces\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getFaceCenters-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getFaceCenters","text":"getFaceCenters(topology, points) -> facecenters\n\nGet an array of center-positions of all faces\n\nArguments\n\ntopology : Topology instace of HalfEdges.jl\npoints   : vertex-list of the polyhedron\n\nReturn\n\nfacecenters : array of center-positions of faces\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getFaceDyads-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getFaceDyads","text":"getFaceDyads(topology, points) -> facedyads\n\nGet an array of dyads for all faces\n\nArguments\n\ntopology : Topology instace of HalfEdges.jl\npoints   : vertex-list of the polyhedron\n\nReturn\n\nfacedyads : array of face dyads\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getFaceFactor-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getFaceFactor","text":"getFaceFactor(r_i, r_j, r_k) -> ω_f\n\nCalculate a face factor, ω_f\n\nArguments\n\nr_i : 1st vertex of the face (counter-clockwise)\nr_j : 2nd vertex of the face\nr_k : 3rd vertex of the face \npos : position where you want the gravity (if skipped, the origin is given)\n\nReturns\n\nω_f: face factor\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getFaceNormals-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getFaceNormals","text":"getFaceNormals(topology, points) -> facenormals\n\nGet an array of normal vectors to all faces\n\nArguments\n\ntopology : Topology instace of HalfEdges.jl\npoints   : vertex-list of the polyhedron\n\nReturn\n\nfacenormals : array of face normals\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getFaceVertices-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getFaceVertices","text":"getFaceVertices(topology, points) -> r1s, r2s, r3s\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getHalfEdgeDyads-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getHalfEdgeDyads","text":"getHalfEdgeDyads(topology, points) -> halfedgedyads\n\nGet an array of dyads for all halfedges\n\nArguments\n\ntopology : Topology instace of HalfEdges.jl\npoints   : vertex-list of the polyhedron\n\nReturn\n\nhalfedgedyads : array of halfedge dyads\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getHalfEdgeVertices-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getHalfEdgeVertices","text":"getHalfEdgeVertices(topology, points) -> heads, tails\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getIlluminatedFacets-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getIlluminatedFacets","text":"getIlluminatedFacets(r̂☉, facets; ray_trace=true) -> ids\n\nArguments\n\nr̂☉        : Normal vector to indicate solar direction\nfacets    : Array of Facet\nray_trace : Option to turn on/off of ray-trace\n\nReturn\n\nids : Indices of illuminated facets\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getSolarCondition-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getSolarCondition","text":"getSolarCondition(orbit, spin, time) -> Φ, r_sun\n\nGet the solar irradition and the direction of the Sun\n\nParameters\n\norbit :\nspin  :\ntime  : [sec]\n\nReturns\n\nF☉ : solar irradiation [W/m^2]\nr̂☉ : solar direction in the body-fixed frame\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getSolarIrradiation-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.getSolarIrradiation","text":"getSolarIrradiation(distance) -> solar_irrad\n\nCalculate the solar irradiation on the body\n\nParameter\n\nrₕ : heliocentric distance of the body [m]\n\nReturn\n\nF☉ : solar irradiation [W/m^2]\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.get_r-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.get_r","text":"get_r(a, e, u) -> r\n\nGet a body's positon based on Kepler's motion\n\nParameters\n\na : semi-major axis\ne : eccentricity\nu : eccentric anomaly\n\nReturn\n\nr : position\n\n(the coordinate system is in the orbital plane and its origin is the eclipse focus)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.get_rv-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.get_rv","text":"get_rv(a, e, n, u) -> r, v\n\nGet a body's positon and velocity based on Kepler's motion\n\nParameters\n\na : semi-major axis\ne : eccentricity\nn : mean motion\nu : eccentric anomaly\n\nReturns\n\nr : position\nv : velocity\n\n(the coordinate system is in the orbital plane and its origin is the eclipse focus)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.get_v-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.get_v","text":"get_v(a, e, n, u) -> v\n\nGet a body's velocity based on Kepler's motion\n\nParameters\n\na : semi-major axis\ne : eccentricity\nn : mean motion\nu : eccentric anomaly\n\nReturn\n\nv : velocity\n\n(the coordinate system is in the orbital plane and its origin is the eclipse focus)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getdyad-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getdyad","text":"getdyad(a, b) -> dyad\n\nMake a dyad from two vectors. You can simply write: a * b'\n\nArguments\n\na, b: two vectors\n\nReturn\n\ndyad: dyad\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getfacets-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.getfacets","text":"Array of Facet, converted from arrays of nodes and faces of a shape model\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.getvolume-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.getvolume","text":"getvolume(facets) -> VOLUME\n\nCalculate volume of a polyhedral\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.inertia_to_orbit!-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.inertia_to_orbit!","text":"Transform the inertial coordinate system to the orbital plane system\n\nParameters\n\nv : vector to be transformed\nω : argument of periapsis\nI : inclination\nΩ : longitude of the ascneding node\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.init_temps_zero!-Tuple{ShapeModel, Any}","page":"Home","title":"ThermoPhysicalModeling.init_temps_zero!","text":"init_temps_zero!(shape::ShapeModel, params)\ninit_temps_zero!(shape::ShapeModel, Nz::AbstractVector)\ninit_temps_zero!(shape::ShapeModel, Nz::Integer)\ninit_temps_zero!(facet::Facet,      Nz::Integer)\n\nInitialize temperature profile in depth on every facet. All elements are intialized as 0 K.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.intensity-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.intensity","text":"intensity(λ, T) -> I\n\nIntensity of radiation at a wavelength λ and tempertature T according to the Planck function\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.isAbove-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.isAbove","text":"isAbove(A, B, C, D)             -> Bool\nisAbove(facet::Facet, D)        -> Bool\nisAbove(obs::Facet, tar::Facet) -> Bool\n\nDetermine if point D is above triangle facet ABC.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.isAboveHorizon-Tuple{ThermoPhysicalModeling.Facet}","page":"Home","title":"ThermoPhysicalModeling.isAboveHorizon","text":"isAboveHorizon(facet::Facet) -> Bool\n\nReturn if the facet is above its local horizon or not\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.isBelow-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.isBelow","text":"isBelow(A, B, C, D)             -> Bool\nisBelow(facet::Facet, D)        -> Bool\nisBelow(obs::Facet, tar::Facet) -> Bool\n\nDetermine if point D is below triangle facet ABC.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.isFace-Tuple{ThermoPhysicalModeling.Facet, ThermoPhysicalModeling.Facet}","page":"Home","title":"ThermoPhysicalModeling.isFace","text":"isFace(obs::Facet, tar::Facet) -> true/false\n\nDetermine if the two facets are facing each other\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.isIlluminated-Tuple{AbstractVector, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.isIlluminated","text":"isIlluminated(obs::AbstractVector, r̂☉, facets) -> Bool\nisIlluminated(obs::Facet, r̂☉, facets)          -> Bool\n\nReturn if the observation point/facet is illuminated by the direct sunlight or not\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.loadobj-Tuple{String}","page":"Home","title":"ThermoPhysicalModeling.loadobj","text":"loadobj(shapepath::String; scale=1, message=true) -> nodes, faces\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.mean_energy_cons_frac!-Tuple{Any, SpinParams}","page":"Home","title":"ThermoPhysicalModeling.mean_energy_cons_frac!","text":"mean_energy_cons_frac!(df, spin::SpinParams)\nmean_energy_cons_frac!(df, P::Real)\n\nAverage energy conservation fraction over a rotational cycle\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.moment_of_inertia-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.moment_of_inertia","text":"moment_of_inertia(facets) -> MOI\n\nCalculate moment of inertia tensor of a polyhedron\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.orb_to_ref!-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.orb_to_ref!","text":"Transform from the orbital plane system to the reference coordinate system\n\nParameters\n\nr : vector to be transformed\nω : argument of periapsis\nI : inclination\nΩ : longitude of the ascneding node\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.orbit_to_body-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.orbit_to_body","text":"orbit_to_body(v, spin::SpinParams) -> v\norbit_to_body(v, γ, ε, ϕ)          -> v\n\nParameters\n\nv : vector in the orbital plane frame\nγ : longitude of vernal equinox direction of the body\nε : obliquity of the spin pole\nϕ : spin phase of the body\n\nReturn\n\nv : vector in the body-fixed frame\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.orbit_to_inertia!-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.orbit_to_inertia!","text":"Transform the orbital plane system to the inertial coordinate system\n\nParameters\n\nv : vector to be transformed\nω : argument of periapsis\nI : inclination\nΩ : longitude of the ascneding node\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.perturbnodes!-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.perturbnodes!","text":"Make a perturbed shape model\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.prep_timestamp-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.prep_timestamp","text":"\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.raycast-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.raycast","text":"raycast(A, B, C, R)                           -> Bool\nraycast(facet::Facet, R)                      -> Bool\nraycast(facet::Facet, R, obs::AbstractVector) -> Bool\nraycast(facet::Facet, R, obs::Facet)          -> Bool\n\nRay-triangle intersection detection. The ray R starts from the origin.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.ref_to_orb!-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.ref_to_orb!","text":"Transform from the reference coordinate system to the orbital plane system\n\nParameters\n\nr : vector to be transformed\nω : argument of periapsis\nI : inclination\nΩ : longitude of the ascneding node\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.rotateX!-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.rotateX!","text":"Rotation transformation around X-axis Parameters:     v : vector to be transformed     θ : rotation angle\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.rotateY!-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.rotateY!","text":"Rotation transformation around Y-axis Parameters:     v : vector to be transformed     θ : rotation angleon\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.rotateZ!-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.rotateZ!","text":"Rotation transformation around Z-axis Parameters:     v : vector to be transformed     θ : rotation angleon\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.run_TPM!","page":"Home","title":"ThermoPhysicalModeling.run_TPM!","text":"\n\n\n\n","category":"function"},{"location":"#ThermoPhysicalModeling.run_TPM!-Tuple{ShapeModel, Any, Any, ThermoParams, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.run_TPM!","text":"shape         : Shape model\net_range      : Range of ephemeris times to run\nsun           : Sun's position in the body-fixed frame at epochs (Not normalized)\nthermo_params : Thermophysical parametes\nsavepath      : Path to save data file\nsave_range    : Indices in et_range to be saved\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.run_TPM!-Tuple{Tuple, Any, Any, Any, Any, ThermoParams, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.run_TPM!","text":"run_TPM!\n\nRun TPM for a binary asteroid.\n\nshapes\nephemerides\nthermo_params\nsavepath\nsavevalues\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.run_YORP-Tuple{Any, Any, Any, ThermoParams}","page":"Home","title":"ThermoPhysicalModeling.run_YORP","text":"\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.run_Yarkovsky-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.run_Yarkovsky","text":"\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.run_binary_TPM!-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.run_binary_TPM!","text":"run_binary_TPM!(binary, thermo_params)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.run_leapfrog-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.run_leapfrog","text":"run_leapfrog(ps, params_sim, filename)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.save_snapshot_txt-Tuple{IO, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.save_snapshot_txt","text":"save_snapshot(out::IOStream, t, ps)\n\nFormat of snapshot\n\nt\nn\nm1 x1 y1 z1 vx1 vy1 vz1\nm2 x2 y2 z2 vx2 vy2 vz2\n:\n:\nmN xN yN zN vxN vyN vzN\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.save_timestamp!-Tuple{Any, Integer, Vararg{Any, 12}}","page":"Home","title":"ThermoPhysicalModeling.save_timestamp!","text":"\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.saveobj-Tuple{String, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.saveobj","text":"saveobj(path::String, nodes, faces)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.solid_angle-Tuple{ThermoPhysicalModeling.Facet, AbstractVector}","page":"Home","title":"ThermoPhysicalModeling.solid_angle","text":"getSolidAngle(facet::Facet, obs::AbstractVector) -> Ω\n\nSolid angle of a triangular facet, equal to area of the corresponding spherical triangle\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.solveKeplerEquation1-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.solveKeplerEquation1","text":"solveKeplerEquation1(e, n, tₚ, t) -> u_i\n\nSolve Kepler's equation with the 1st order method\n\nParameters\n\ne  : eccentricity\nn  : mean motion\ntₚ : periapsis passage time [sec]\nt  : time\n\nReturn\n\nu_i : eccentric anomaly (i-th order solution)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.solveKeplerEquation2-NTuple{4, Any}","page":"Home","title":"ThermoPhysicalModeling.solveKeplerEquation2","text":"solveKeplerEquation2(e, n, tₚ, t) -> u_i\n\nSolve Kepler's equation with the 2nd order method (Newton's method)\n\nParameters\n\ne  : eccentricity\nn  : mean motion\ntₚ : periapsis passage time [sec]\nt  : time\n\nReturn\n\nu_i : eccentric anomaly (i-th order solution)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.spherical_excess-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.spherical_excess","text":"spherical_excess(a, b, c) -> E\n\nArea of a spherical triangle c.f. L'Huilier's Theorem\n\nArguments\n\na, b, c : side lengths of a spherical traiangle\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.spin_normal-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.spin_normal","text":"Get a spin pole direction in the orbital plane frame\n\nParamters\n\nλ : ecliptic longitude\nβ : ecliptic latitude\norbit : orbital elements\n\nReturn\n\nŝ : spin pole direction (normalized)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.spin_perp_unit1-Tuple{SpinParams}","page":"Home","title":"ThermoPhysicalModeling.spin_perp_unit1","text":"spin_perp_unit1(spin::SpinParams) -> ê1\n\nGet a unit vector ê⟂1\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.spin_perp_unit2-Tuple{SpinParams}","page":"Home","title":"ThermoPhysicalModeling.spin_perp_unit2","text":"spin_perp_unit2(spin::SpinParams) -> ê2\n\nGet a unit vector ê⟂2\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.spin_perp_units-Tuple{SpinParams}","page":"Home","title":"ThermoPhysicalModeling.spin_perp_units","text":"spin_perp_units(spin::SpinParams) -> ê1, ê2\n\nGet a unit vector ê⟂1 and ê⟂2, perpendicular to spin pole\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.step_heat_cond!-Tuple{ShapeModel, AbstractVector}","page":"Home","title":"ThermoPhysicalModeling.step_heat_cond!","text":"step_heat_cond!(shape::ShapeModel, λ::AbstractVector)\nstep_heat_cond!(shape::ShapeModel, λ::Real)\nstep_heat_cond!(facet::Facet,      λ::Real)\nstep_heat_cond!(Tⱼ::AbstractVector, Tⱼ₊₁::AbstractVector, λ::Real)\n\nCalculate temperature profile at the next step and update Facet.temps\n\nArguments\n\nfacet : Surface facet (Facet)\nλ     : Coefficient of heat conduction equation\nTⱼ     : Temperatures\nTⱼ₊₁   : Temperatures at the next timestep\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.sum_force_torque!-Tuple{ShapeModel}","page":"Home","title":"ThermoPhysicalModeling.sum_force_torque!","text":"sum_force_torque!(shape::Shape)\n\nIntegrate the force and torque over the global surface\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.thermal_inertia-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.thermal_inertia","text":"thermal_inertia(params)   -> Γ\nthermal_inertia(k, ρ, Cp) -> Γ\n\nArguments\n\nk  : Thermal conductivity [W/m/K]\nρ  : Material density [kg/m³]\nCp : Heat capacity [J/kg/K]\n\nReturn\n\nΓ : Thermal inertia [J ⋅ m⁻² ⋅ K⁻¹ ⋅ s⁻⁰⁵ (tiu)]\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.thermal_skin_depth-Tuple{Any}","page":"Home","title":"ThermoPhysicalModeling.thermal_skin_depth","text":"thermal_skin_depth(params)      -> l_2π\nthermal_skin_depth(P, k, ρ, Cp) -> l_2π\n\nArguments\n\nP  : Cycle of thermal cycle [sec]\nk  : Thermal conductivity [W/m/K]\nρ  : Material density [kg/m³]\nCp : Heat capacity [J/kg/K]\n\nReturn\n\nl_2π : Thermal skin depth [m]\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.u2ν-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.u2ν","text":"u2ν(u, e) -> ν\n\nCalculate true anomaly ν from eccentric anomaly u and eccentricity e\n\nParameters\n\nu : Eccentric anomaly\ne : Eccentricity\n\nReturn\n\nν : True anomaly\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update!-Tuple{Binary, Any}","page":"Home","title":"ThermoPhysicalModeling.update!","text":"update_binary!(binary, t)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_bottom_temp!-Tuple{ShapeModel}","page":"Home","title":"ThermoPhysicalModeling.update_bottom_temp!","text":"Update bottom temperature under boundary condition of insulation\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_flux!-Tuple{Any, Real, AbstractVector, Any}","page":"Home","title":"ThermoPhysicalModeling.update_flux!","text":"update_flux!(shape, F☉, r̂☉, thermo_params)\n\nUpdate energy flux to every facet by solar radiation, scattering, and re-absorption of radiation\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_flux_rad_single!-Tuple{Any, ThermoParams}","page":"Home","title":"ThermoPhysicalModeling.update_flux_rad_single!","text":"update_flux_rad_single!(shape, params)\nupdate_flux_rad_single!(shape, ϵ::Real)\nupdate_flux_rad_single!(shape, ϵ::AbstractVector)\n\nSingle radiation-reabsorption is considered, assuming albedo is close to zero at thermal infrared wavelength.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_flux_scat_single!-Tuple{Any, ThermoParams}","page":"Home","title":"ThermoPhysicalModeling.update_flux_scat_single!","text":"update_flux_scat_single!(shape, params)\nupdate_flux_scat_single!(shape, A_B::Real)\nupdate_flux_scat_single!(shape, A_B::AbstractVector)\n\nSingle scattering of sunlight is considered.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_flux_sun!-Tuple{Any, AbstractVector}","page":"Home","title":"ThermoPhysicalModeling.update_flux_sun!","text":"update_flux_sun!(shape, r☉::AbstractVector)\n\nUpdate solar radiation flux on every facet of a shape model.\n\nshape : Shape model\nr☉    : Position of the sun in the body-fixed frame, which is not normalized.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_flux_sun!-Tuple{Any, Any, Any}","page":"Home","title":"ThermoPhysicalModeling.update_flux_sun!","text":"update_flux_sun!(shape, F☉, r̂☉)\n\nUpdate solar radiation flux on every facet of a shape model.\n\nshape : Shape model\nF☉    : Solar radiation flux\nr̂☉    : Unit vector indicating the direction of the sun in the body-fixed frame\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_force!-Tuple{ShapeModel, Any}","page":"Home","title":"ThermoPhysicalModeling.update_force!","text":"update_force!(shape::ShapeModel, params)\nupdate_force!(shape::ShapeModel, A_B::Real,           ϵ::Real)\nupdate_force!(shape::ShapeModel, A_B::AbstractVector, ϵ::Real)\nupdate_force!(shape::ShapeModel, A_B::Real,           ϵ::AbstractVector)\nupdate_force!(shape::ShapeModel, A_B::AbstractVector, ϵ::AbstractVector)\nupdate_force!(facet::Facet,      A_B::Real,           ϵ::Real)\n\nUpdate photon recoil force on every facet (dfᵢ)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_force_Rubincam!-Tuple{Any, Any}","page":"Home","title":"ThermoPhysicalModeling.update_force_Rubincam!","text":"update_force_Rubincam!(shape, params_thermo)\n\nUpdate photon recoil force on every facet (df) based on Rubincam (2000) approximation\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_orbit!-Tuple{OrbitalElements, Any}","page":"Home","title":"ThermoPhysicalModeling.update_orbit!","text":"update_orbit!(orbit::OrbitalElements, t)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_spin!-Tuple{SpinParams, Any}","page":"Home","title":"ThermoPhysicalModeling.update_spin!","text":"update_spin!(spin::SpinParams, t)\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_surf_temp!-Tuple{ShapeModel, Vararg{Any, 6}}","page":"Home","title":"ThermoPhysicalModeling.update_surf_temp!","text":"update_surf_temp!(shape::ShapeModel, A_B, A_TH, k, l, Δz, ϵ)\nupdate_surf_temp!(shape::ShapeModel, A_B::Real, A_TH::Real, k::Real, l::Real, Δz::Real, ϵ::Real)\nupdate_surf_temp!(facet::Facet,      A_B::Real, A_TH::Real, k::Real, l::Real, Δz::Real, ϵ::Real)\nupdate_surf_temp!(T::AbstractVector, F_total::Real, k::Real, l::Real, Δz::Real, ϵ::Real)\n\nUpdate surface temperature under radiative boundary condition using Newton's method\n\nArguments\n\nfacet   : surface facet (Facet)\nA_B     : Bond albedo\nA_TH    : Albedo in thermal infrared wavelength\nk       : Thermal conductivity\nl       : Thermal skin depth\nΔz      : Step width in depth direction (normalized by thermal skin depth l)\nϵ       : Emissivity\nT       : 1-D array of temperatures\nF_total : Total energy absorbed by the facet\n\nIn the normalized equation of the surface boundary condition, the coefficient Γ / √(4π * P) is equivalent for k / l, where Γ is the thermal inertia and P the rotation period.\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.update_temps!-Tuple{ShapeModel, ThermoParams}","page":"Home","title":"ThermoPhysicalModeling.update_temps!","text":"update_temps!(shape::ShapeModel, params::ThermoParams)\nupdate_temps!(shape::ShapeModel, λ, A_B, A_TH, k, l, Δz, ϵ)\nupdate_temps!(facet::Facet, λ::Real, A_B::Real, A_TH::Real, k::Real, l::Real, Δz::Real, ϵ::Real)\n\nUpdate temerature profie (Facet.temps) based on 1-D heat diffusion\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.vernal_equinox_lon-Tuple{SpinParams}","page":"Home","title":"ThermoPhysicalModeling.vernal_equinox_lon","text":"vernal_equinox_lon(spin::SpinParams)        -> γ\nvernal_equinox_lon(ŝ::AbstractVector) -> γ\n\nGet a longitude of the vernal equinox with respect to the perihelion\n\n\n\n\n\n","category":"method"},{"location":"#ThermoPhysicalModeling.view_factor-Tuple{ThermoPhysicalModeling.Facet, ThermoPhysicalModeling.Facet}","page":"Home","title":"ThermoPhysicalModeling.view_factor","text":"view_factor(i::Facet, j::Facet) -> fᵢⱼ, dᵢⱼ, d̂ᵢⱼ\n\nView factor from facet i to j, assuming Lambertian emission\n\n\n\n\n\n","category":"method"}]
}
