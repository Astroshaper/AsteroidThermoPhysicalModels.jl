var documenterSearchIndex = {"docs":
[{"location":"benchmarks/#Performance-and-Benchmarks","page":"Performance","title":"Performance and Benchmarks","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"This page provides performance expectations and optimization guidelines for AsteroidThermoPhysicalModels.jl.","category":"page"},{"location":"benchmarks/#Expected-Performance","page":"Performance","title":"Expected Performance","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"The following benchmarks were performed on Apple M4 (macOS, single-threaded):","category":"page"},{"location":"benchmarks/#Single-Asteroid-(Ryugu)","page":"Performance","title":"Single Asteroid (Ryugu)","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Shape complexity: 49,152 faces\n1 rotation (72 time steps): ~5.7 seconds\n20 rotations (1,440 time steps): ~112 seconds (1.9 minutes)\nMemory usage: 152 KiB (20 rotations), minimal allocations\nWith shadows and self-heating enabled","category":"page"},{"location":"benchmarks/#Binary-System-(Didymos-Dimorphos)","page":"Performance","title":"Binary System (Didymos-Dimorphos)","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Primary: 1,996 faces, Secondary: 3,072 faces\n1 rotation: ~4.9 seconds\n20 rotations: ~98 seconds (1.6 minutes)\nMemory usage: 304 KiB (20 rotations)\nWith mutual shadowing and heating enabled","category":"page"},{"location":"benchmarks/#Component-Performance","page":"Performance","title":"Component Performance","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Shadow calculations: ~0.016 seconds per time step\nSelf-heating: ~0.028 seconds per time step\nTemperature update: ~0.026 seconds per time step","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Note: Performance may vary depending on CPU architecture. Intel/AMD processors may show different characteristics.","category":"page"},{"location":"benchmarks/#Performance-Considerations","page":"Performance","title":"Performance Considerations","text":"","category":"section"},{"location":"benchmarks/#Computational-Complexity","page":"Performance","title":"Computational Complexity","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"The main computational bottlenecks are:","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Shadow calculations: O(N²) where N is the number of faces\nDominates computation time for large shape models\nCan be disabled with SELF_SHADOWING = false for faster computation\nSelf-heating: O(N×M) where M is the average number of visible faces\nUses precomputed visibility graph\nCan be disabled with SELF_HEATING = false\nTemperature solver: O(N×D) where D is the number of depth layers\nTypically not a bottleneck unless using many depth layers","category":"page"},{"location":"benchmarks/#Memory-Usage","page":"Performance","title":"Memory Usage","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Memory scales approximately as:","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Shape model: O(N)\nTemperature array: O(N×D)\nVisibility graph: O(N×M) where M is average visible faces per face","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"For Ryugu (49k faces, 41 depth layers):","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Expected memory usage: 2-3 GB\nPeak during visibility computation: 4-5 GB","category":"page"},{"location":"benchmarks/#Optimization-Tips","page":"Performance","title":"Optimization Tips","text":"","category":"section"},{"location":"benchmarks/#1.-Disable-Features-for-Faster-Computation","page":"Performance","title":"1. Disable Features for Faster Computation","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"# Fastest configuration (no shadows or self-heating)\nstpm = SingleAsteroidTPM(shape, thermo_params;\n    SELF_SHADOWING = false,\n    SELF_HEATING = false\n)","category":"page"},{"location":"benchmarks/#2.-Reduce-Shape-Complexity","page":"Performance","title":"2. Reduce Shape Complexity","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"For preliminary calculations, use a simplified shape model.","category":"page"},{"location":"benchmarks/#3.-Adjust-Time-Resolution","page":"Performance","title":"3. Adjust Time Resolution","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Larger time steps can be used for initial calculations:","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"# Use fewer steps per rotation\nn_step_in_cycle = 36  # Instead of 72","category":"page"},{"location":"benchmarks/#4.-Parallel-Execution","page":"Performance","title":"4. Parallel Execution","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"The package supports multi-threading for some operations:","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"# Start Julia with multiple threads\n# $ julia -t 8\n\n# The visibility graph computation will use available threads","category":"page"},{"location":"benchmarks/#Version-Performance-History","page":"Performance","title":"Version Performance History","text":"","category":"section"},{"location":"benchmarks/#v0.0.8-DEV-(Current)","page":"Performance","title":"v0.0.8-DEV (Current)","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Added comprehensive benchmark suite\nPerformance tracking infrastructure\nMigrated to AsteroidShapeModels.jl v0.3.0\nImproved visibility graph API\nPerformance: Ryugu 20 rotations in ~112s, Didymos in ~98s\nMemory: Extremely efficient with <1MB for typical simulations","category":"page"},{"location":"benchmarks/#v0.0.7","page":"Performance","title":"v0.0.7","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Memory optimizations in flux calculations\nBasic shadow and self-heating calculations","category":"page"},{"location":"benchmarks/#Earlier-versions","page":"Performance","title":"Earlier versions","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"Initial implementation\nBasic thermophysical modeling","category":"page"},{"location":"benchmarks/#Benchmarking-Your-Configuration","page":"Performance","title":"Benchmarking Your Configuration","text":"","category":"section"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"To benchmark your specific use case:","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"using BenchmarkTools\nusing AsteroidThermoPhysicalModels\n\n# Your setup\nstpm = # ... your model\nephem = # ... your ephemerides\n\n# Benchmark\n@benchmark run_TPM!($stpm, $ephem, Float64[], Int[]; show_progress=false)","category":"page"},{"location":"benchmarks/","page":"Performance","title":"Performance","text":"For detailed benchmarking, see the benchmark/ directory in the source repository.","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This section provides the API reference of AsteroidThermoPhysicalModels.jl.","category":"page"},{"location":"api/#AsteroidThermoPhysicalModels.AbstractAsteroidThermoPhysicalModel","page":"API Reference","title":"AsteroidThermoPhysicalModels.AbstractAsteroidThermoPhysicalModel","text":"Abstract type of an asteroid's thermophysical model. The AbstractAsteroidTPM type is an alias for AbstractAsteroidThermoPhysicalModel.\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModel","page":"API Reference","title":"AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModel","text":"struct BinaryAsteroidThermoPhysicalModel{M1, M2} <: AbstractAsteroidThermoPhysicalModel\n\nFields\n\npri              : TPM for the primary\nsec              : TPM for the secondary\nMUTUAL_SHADOWING : Flag to consider mutual shadowing\nMUTUAL_HEATING   : Flag to consider mutual heating\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModel-Tuple{Any, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModel","text":"BinaryAsteroidThermoPhysicalModel(pri, sec; MUTUAL_SHADOWING=true, MUTUAL_HEATING=true) -> btpm\n\nConstruct a thermophysical model for a binary asteroid (BinaryAsteroidThermoPhysicalModel).\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModelResult","page":"API Reference","title":"AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModelResult","text":"struct BinaryAsteroidThermoPhysicalModelResult\n\nOutput data format for BinaryAsteroidThermoPhysicalModel\n\nFields\n\npri : TPM result for the primary\nsec : TPM result for the secondary\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModelResult-Tuple{BinaryAsteroidThermoPhysicalModel, Any, Vector{Float64}, Vector{Int64}, Vector{Int64}}","page":"API Reference","title":"AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModelResult","text":"Outer constructor of BinaryAsteroidThermoPhysicalModelResult\n\nArguments\n\nbtpm          : Thermophysical model for a binary asteroid\nephem         : Ephemerides\ntimes_to_save : Timesteps to save temperature (Common to both the primary and the secondary)\nface_ID_pri   : Face indices to save subsurface temperature of the primary\nface_ID_sec   : Face indices to save subsurface temperature of the secondary\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.BoundaryCondition","page":"API Reference","title":"AsteroidThermoPhysicalModels.BoundaryCondition","text":"Abstract type of a boundary condition for a heat conduction equation\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.CrankNicolsonSolver","page":"API Reference","title":"AsteroidThermoPhysicalModels.CrankNicolsonSolver","text":"Type of the Crank-Nicolson method:\n\nImplicit in time (Unconditionally stable in the heat conduction equation)\nSecond order in time\n\nThe CrankNicolsonSolver type has vectors for the tridiagonal matrix algorithm.\n\nReferences\n\nhttps://en.wikipedia.org/wiki/Crank–Nicolson_method\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.ExplicitEulerSolver","page":"API Reference","title":"AsteroidThermoPhysicalModels.ExplicitEulerSolver","text":"Type of the explicit (forward) Euler method:\n\nExplicit in time\nFirst order in time\n\nThe ExplicitEulerSolver type includes a vector for the temperature at the next time step.\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.HeatConductionSolver","page":"API Reference","title":"AsteroidThermoPhysicalModels.HeatConductionSolver","text":"Abstract type of a solver for a heat conduction equation \n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.ImplicitEulerSolver","page":"API Reference","title":"AsteroidThermoPhysicalModels.ImplicitEulerSolver","text":"Type of the implicit (backward) Euler method:\n\nImplicit in time (Unconditionally stable in the heat conduction equation)\nFirst order in time\n\nThe ImplicitEulerSolver type has vectors for the tridiagonal matrix algorithm.\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.InsulationBoundaryCondition","page":"API Reference","title":"AsteroidThermoPhysicalModels.InsulationBoundaryCondition","text":"Singleton type of insulation boundary condition\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.IsothermalBoundaryCondition","page":"API Reference","title":"AsteroidThermoPhysicalModels.IsothermalBoundaryCondition","text":"Type of isothermal boundary condition\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.RadiationBoundaryCondition","page":"API Reference","title":"AsteroidThermoPhysicalModels.RadiationBoundaryCondition","text":"Singleton type of radiation boundary condition\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModel","page":"API Reference","title":"AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModel","text":"struct SingleAsteroidThermoPhysicalModel <: AbstractAsteroidThermoPhysicalModel\n\nFields\n\nshape          : Shape model\nthermo_params  : Thermophysical parameters\nflux_sun       : Flux of direct sunlight on each face [W/m²]\nflux_scat      : Flux of scattered light on each face [W/m²]\nflux_rad       : Flux of thermal emission from surrounding surface on each face [W/m²]\ntemperature    : Temperature matrix (n_depth, n_face) according to the number of depth cells n_depth and the number of faces n_face.\nface_forces    : Thermal force on each face\nforce          : Thermal recoil force at body-fixed frame (Yarkovsky effect)\ntorque         : Thermal recoil torque at body-fixed frame (YORP effect)\nSELF_SHADOWING : Flag to consider self-shadowing\nSELF_HEATING   : Flag to consider self-heating\nSOLVER         : Solver of heat conduction equation\nBC_UPPER       : Boundary condition at the upper boundary\nBC_LOWER       : Boundary condition at the lower boundary\n\nTODO:\n\nroughness_maps   ::ShapeModel[]\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModel-Tuple{Any, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModel","text":"SingleAsteroidThermoPhysicalModel(shape, thermo_params; SELF_SHADOWING=true, SELF_HEATING=true) -> stpm\n\nConstruct a thermophysical model for a single asteroid (SingleAsteroidThermoPhysicalModel).\n\nArguments\n\nshape          : Shape model\nthermo_params  : Thermophysical parameters\n\nKeyword arguments\n\nSELF_SHADOWING : Flag to consider self-shadowing\nSELF_HEATING   : Flag to consider self-heating\nSOLVER         : Solver of heat conduction equation\nBC_UPPER       : Boundary condition at the upper boundary\nBC_LOWER       : Boundary condition at the lower boundary\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModelResult","page":"API Reference","title":"AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModelResult","text":"struct SingleAsteroidThermoPhysicalModelResult\n\nOutput data format for SingleAsteroidThermoPhysicalModel \n\nFields\n\nSaved at all time steps\n\ntimes  : Timesteps, given the same vector as ephem.time [s]\nE_in   : Input energy per second on the whole surface [W]\nE_out  : Output energy per second from the whole surface [W]\nforce  : Thermal force on the asteroid [N]\ntorque : Thermal torque on the asteroid [N ⋅ m]\n\nSaved only at the time steps desired by the user\n\ntimes_to_save          : Timesteps to save temperature and thermal force on every face [s]\ndepth_nodes            : Depths of the calculation nodes for 1-D heat conduction [m], a vector of size n_depth\nsurface_temperature    : Surface temperature [K], a matrix in size of (n_face, n_time).\nn_face : Number of faces\nn_time : Number of time steps to save surface temperature\nsubsurface_temperature : Temperature [K] as a function of depth [m] and time [s], Dict with face ID as key and a matrix (n_depth, n_time) as an entry.\nn_depth : The number of the depth nodes\nn_time : The number of time steps to save temperature\nface_forces            : Thermal force on every face of the shape model [N], a matrix in size of (n_face, n_time).\nn_face : Number of faces\nn_time : Number of time steps to save surface temperature\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModelResult-Tuple{SingleAsteroidThermoPhysicalModel, Any, Vector{Float64}, Vector{Int64}}","page":"API Reference","title":"AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModelResult","text":"Outer constructor of SingleAsteroidThermoPhysicalModelResult\n\nArguments\n\nstpm          : Thermophysical model for a single asteroid\nephem         : Ephemerides\ntimes_to_save : Timesteps to save temperature\nface_ID       : Face indices to save subsurface temperature\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.ThermoParams","page":"API Reference","title":"AsteroidThermoPhysicalModels.ThermoParams","text":"struct ThermoParams\n\nFields\n\nthermal_conductivity : Vector of thermal conductivity for each facet [W/m/K]\ndensity              : Vector of density for each facet [kg/m³]\nheat_capacity        : Vector of heat capacity for each facet [J/kg/K]\nreflectance_vis : Vector of reflectance in visible light for each facet [-]\nreflectance_ir  : Vector of reflectance in thermal infrared for each facet [-]\nemissivity      : Vector of emissivity for each facet [-]\nz_max   : Depth of the lower boundary of a heat conduction equation [m]\nΔz      : Depth step width [m]\nn_depth : Number of depth steps\n\n\n\n\n\n","category":"type"},{"location":"api/#AsteroidThermoPhysicalModels.ThermoParams-Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64}","page":"API Reference","title":"AsteroidThermoPhysicalModels.ThermoParams","text":"ThermoParams(\n    thermal_conductivity ::Float64,\n    density              ::Float64,\n    heat_capacity        ::Float64,\n    reflectance_vis      ::Float64,\n    reflectance_ir       ::Float64,\n    emissivity           ::Float64,\n    z_max                ::Float64,\n    Δz                   ::Float64,\n    n_depth              ::Int\n)\n\nOuter constructor for ThermoParams. You can give the same parameters to all facets by Float64.\n\nArguments\n\nthermal_conductivity : Thermal conductivity [W/m/K]\ndensity              : Density [kg/m³]\nheat_capacity        : Heat capacity [J/kg/K]\nreflectance_vis : Reflectance in visible light [-]\nreflectance_ir  : Reflectance in thermal infrared [-]\nemissivity      : Emissivity [-]\nz_max           : Depth of the lower boundary of a heat conduction equation [m]\nΔz              : Depth step width [m]\nn_depth         : Number of depth steps\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.absorbed_energy_flux-NTuple{5, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.absorbed_energy_flux","text":"absorbed_energy_flux(R_vis, R_ir, F_sun, F_scat, F_rad) -> F_abs\n\nCalculate the total energy flux absorbed by a surface element, accounting for wavelength-dependent reflectance properties.\n\nArguments\n\nR_vis::Real : Reflectance for visible light [-], valid between 0 and 1.\nR_ir::Real : Reflectance for thermal infrared [-], valid between 0 and 1.\nF_sun::Real : Direct solar radiation flux [W/m²]\nF_scat::Real : Scattered sunlight flux from other surfaces [W/m²]\nF_rad::Real : Thermal radiation flux from surrounding surfaces [W/m²]\n\nReturns\n\nF_abs::Real : Total absorbed energy flux [W/m²]\n\nMathematical Formula\n\nF_abs = (1 - R_vis) × F_sun + (1 - R_vis) × F_scat + (1 - R_ir) × F_rad\n\nPhysical Interpretation\n\nThe function accounts for different reflectance properties at different wavelengths:\n\nSolar radiation (Fsun) and scattered light (Fscat) are in the visible spectrum\nThermal radiation (F_rad) is in the infrared spectrum\nThe absorbed fraction is (1 - reflectance) for each component\n\nExample\n\nR_vis = 0.1   # 10% reflectance in visible\nR_ir = 0.05   # 5% reflectance in IR\nF_sun = 1000.0   # Direct solar flux\nF_scat = 50.0    # Scattered light\nF_rad = 100.0    # Thermal radiation\nF_abs = absorbed_energy_flux(R_vis, R_ir, F_sun, F_scat, F_rad)\n# Returns: 0.9 × 1000 + 0.9 × 50 + 0.95 × 100 = 1040.0 W/m²\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.analytical_solution_isothermal-NTuple{4, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.analytical_solution_isothermal","text":"analytical_solution_isothermal(x, t, L, α; n_max=100) -> T\n\nCalculate the analytical solution of the 1D heat equation with isothermal boundary conditions.\n\nEquation: ∂T/∂t = α ∂²T/∂x²\nDomain: 0 ≤ x ≤ L\nBoundary conditions: T(0,t) = T(L,t) = 0\nInitial condition: T₀(x) = x < 0.5L ? 2x/L : 2(1 - x/L)  # Triangular profile as follows:       T₀       ^      1 |   ・       |  ・ ・       | ・   ・       |・     ・     0 +–-+–-+–> x       0  L/2  L\n\nThe solution is given by the Fourier series:     T(x, t) = Σ Bₙ * sin(nπx/L) * exp(-αn²π²t/L²) where Bₙ = (2/L) * ∫₀^L T₀(ξ) * sin(nπξ/L) dξ For the triangular initial condition, the coefficients can be calculated analytically:     Bₙ = (8/n²π²) * sin(nπ/2) only for odd n. The sum of even-n terms is zero due to symmetry.\n\nArguments\n\nx     : Position [m]\nt     : Time [s]\nL     : Length of the domain [m]\nα     : Thermal diffusivity [m²/s]\nn_max : Number of terms in the Fourier series\n\nReturns\n\nT     : Temperature [K]\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.blackbody_radiance-Tuple{Any, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.blackbody_radiance","text":"blackbody_radiance(λ, T) -> L_λ\n\nAccroding to Planck's law, calculate the spectral intensity of blackbody radiation at wavelength λ and temperature T.\n\nArguments\n\nλ : Wavelength [m]\nT : Temperature [K]\n\nReturn\n\nL_λ : Spectral radiance [W/m²/m/steradian]\n\ncf. https://github.com/JuliaAstro/Planck.jl/blob/main/src/Planck.jl\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.blackbody_radiance-Tuple{Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.blackbody_radiance","text":"blackbody_radiance(T) -> L\n\nAccording to Stefan-Boltzmann law, calculate the total radiance of blackbody radiation at temperature T, integrated over all wavelength.\n\nArguments\n\nT : Temperature [K]\n\nReturn\n\nL : Radiance [W/m²/steradian]\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.broadcast_thermo_params!-Tuple{AsteroidThermoPhysicalModels.ThermoParams, AsteroidShapeModels.ShapeModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.broadcast_thermo_params!","text":"broadcast_thermo_params!(thermo_params::ThermoParams, shape::ShapeModel)\n\nBroadcast the thermophysical parameters to all faces if the values are uniform globally.\n\nArguments\n\nthermo_params : Thermophysical parameters\nshape         : Shape model\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.broadcast_thermo_params!-Tuple{AsteroidThermoPhysicalModels.ThermoParams, Int64}","page":"API Reference","title":"AsteroidThermoPhysicalModels.broadcast_thermo_params!","text":"broadcast_thermo_params!(thermo_params::ThermoParams, n_face::Int)\n\nBroadcast the thermophysical parameters to all faces if the values are uniform globally.\n\nArguments\n\nthermo_params : Thermophysical parameters\nn_face        : Number of faces on the shape model\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.concave_spherical_segment-NTuple{6, Real}","page":"API Reference","title":"AsteroidThermoPhysicalModels.concave_spherical_segment","text":"concave_spherical_segment(r, h, xc, yc, x, y) -> z\n\nCalculate the z-coordinate (depth) of a point on a concave spherical segment (crater).\n\nArguments\n\nr::Real : Crater radius [m]\nh::Real : Crater depth [m]\nxc::Real: x-coordinate of crater center [m]\nyc::Real: y-coordinate of crater center [m]\nx::Real : x-coordinate where to calculate z [m]\ny::Real : y-coordinate where to calculate z [m]\n\nReturns\n\nz::Real: Depth below the reference surface (negative value) [m]\n\nMathematical Model\n\nThe crater is modeled as a spherical cap. For a point (x,y) within the crater:\n\nz = R - h - sqrtR^2 - d^2\n\nwhere:\n\nR is the curvature radius calculated from crater_curvature_radius(r, h)\nd is the distance from the crater center: d = √((x-xc)² + (y-yc)²)\nz = 0 outside the crater (when d > r)\n\nExample\n\n# A crater at (0.5, 0.5) with radius 0.2 and depth 0.05\nz = concave_spherical_segment(0.2, 0.05, 0.5, 0.5, 0.6, 0.5)  # Point at crater rim\n\nNotes\n\nReturns z ≤ 0 (crater is a depression)\nReturns z = 0 for points outside the crater\nThe reference surface is at z = 0\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.concave_spherical_segment-Tuple{Real, Real}","page":"API Reference","title":"AsteroidThermoPhysicalModels.concave_spherical_segment","text":"concave_spherical_segment(r, h; Nx=2^5, Ny=2^5, xc=0.5, yc=0.5) -> xs, ys, zs\n\nGenerate a grid representation of a concave spherical segment (crater) on a unit square domain.\n\nArguments\n\nr::Real : Crater radius (in normalized coordinates, 0-1)\nh::Real : Crater depth (in same units as radius)\n\nKeyword Arguments\n\nNx::Integer=32: Number of grid points in the x-direction\nNy::Integer=32: Number of grid points in the y-direction\nxc::Real=0.5: x-coordinate of crater center (normalized, 0-1)\nyc::Real=0.5: y-coordinate of crater center (normalized, 0-1)\n\nReturns\n\nxs::LinRange: x-coordinates of grid points (0 to 1)\nys::LinRange: y-coordinates of grid points (0 to 1)\nzs::Matrix: z-coordinates (depths) at each grid point\n\nExample\n\n# Create a crater grid with radius 0.3 and depth 0.1\nxs, ys, zs = concave_spherical_segment(0.3, 0.1; Nx=64, Ny=64)\n\n# Off-center crater\nxs, ys, zs = concave_spherical_segment(0.2, 0.05; xc=0.3, yc=0.7)\n\nNotes\n\nThe domain is normalized to [0,1] × [0,1]\nThe crater parameters should be scaled accordingly\nGrid has (Nx+1) × (Ny+1) total points\nUseful for generating synthetic rough surfaces\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.crank_nicolson!-Tuple{SingleAsteroidThermoPhysicalModel, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.crank_nicolson!","text":"crank_nicolson!(stpm::SingleAsteroidTPM, Δt)\n\nSolve the 1D heat conduction equation using the Crank-Nicolson method. This method combines the explicit and implicit Euler methods for improved accuracy.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\nΔt::Real : Time step [s]\n\nMethod Properties\n\nTime discretization: Semi-implicit (average of forward and backward differences)\nAccuracy: Second-order in both time and space\nStability: Unconditionally stable for any time step size\n\nDiscretization\n\nThe heat conduction equation ∂T/∂t = α∂²T/∂z² is discretized using the average of explicit and implicit schemes:\n\nT[i,n+1] - T[i,n] = (α∆t)/(2∆z²) × \n    [(T[i+1,n+1] - 2T[i,n+1] + T[i-1,n+1]) + (T[i+1,n] - 2T[i,n] + T[i-1,n])]\n\nThis leads to a tridiagonal system:\n\n-rT[i-1,n+1] + (1+2r)T[i,n+1] - rT[i+1,n+1] = \n    rT[i-1,n] + (1-2r)T[i,n] + rT[i+1,n]\n\nwhere r = α∆t/(2∆z²)\n\nAdvantages\n\nHigher accuracy than both explicit and implicit Euler methods\nUnconditionally stable\nOptimal balance between accuracy and computational cost\nSecond-order accuracy in both time and space\n\nImplementation Details\n\nThe method requires solving a tridiagonal system at each time step, similar to the implicit Euler method but with a modified right-hand side that includes information from the current time step.\n\nSee Also\n\ntridiagonal_matrix_algorithm! for the solution algorithm\nimplicit_euler!, explicit_euler! for comparison with other methods\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.crater_curvature_radius-Tuple{Real, Real}","page":"API Reference","title":"AsteroidThermoPhysicalModels.crater_curvature_radius","text":"crater_curvature_radius(r, h) -> R\n\nCalculate the curvature radius of a concave spherical segment (crater shape).\n\nArguments\n\nr::Real: Crater radius [m]\nh::Real: Crater depth [m]\n\nReturns\n\nR::Real: Curvature radius of the spherical cap [m]\n\nMathematical Formula\n\nThe curvature radius R of a spherical cap is given by:\n\nR = fracr^2 + h^22h\n\nwhere r is the crater rim radius and h is the crater depth.\n\nExample\n\n# A crater with 10m radius and 2m depth\nR = crater_curvature_radius(10.0, 2.0)  # Returns 26.0\n\nNotes\n\nThe crater is modeled as a spherical cap (portion of a sphere)\nLarger R values correspond to shallower craters\nAs h → 0, R → ∞ (flat surface)\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.energy_in-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.energy_in","text":"energy_in(stpm::SingleAsteroidTPM) -> E_in\n\nCalculate the total energy input rate (power) absorbed by the entire asteroid surface.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\n\nReturns\n\nE_in::Float64 : Total absorbed power [W]\n\nCalculation\n\nIntegrates the absorbed energy flux over all surface facets:\n\nE_in = Σᵢ F_abs,ᵢ × Aᵢ\n\nwhere:\n\nFabs,ᵢ is the absorbed energy flux on facet i (calculated by `absorbedenergy_flux`)\nAᵢ is the area of facet i\n\nComponents\n\nThe absorbed energy includes:\n\nDirect solar radiation\nScattered light from other facets (if self-heating is enabled)\nThermal radiation from other facets (if self-heating is enabled)\n\nUsage\n\nThis function is typically used to check energy conservation in the model by comparing with energy_out.\n\nSee Also\n\nenergy_out for the total emitted power\nabsorbed_energy_flux for the flux calculation\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.energy_out-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.energy_out","text":"energy_out(stpm::SingleAsteroidTPM) -> E_out\n\nCalculate the total energy output rate (power) emitted by the entire asteroid surface through thermal radiation.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\n\nReturns\n\nE_out::Float64 : Total emitted power [W]\n\nCalculation\n\nIntegrates the thermal emission over all surface facets using the Stefan-Boltzmann law:\n\nE_out = Σᵢ εᵢ × σ × Tᵢ⁴ × Aᵢ\n\nwhere:\n\nεᵢ is the emissivity of facet i\nσ is the Stefan-Boltzmann constant (5.67×10⁻⁸ W/m²/K⁴)\nTᵢ is the surface temperature of facet i [K]\nAᵢ is the area of facet i [m²]\n\nEnergy Conservation\n\nIn thermal equilibrium, Eout should approximately equal Ein (from energy_in). The ratio Eout/Ein is often used as a convergence criterion in thermophysical models.\n\nSee Also\n\nenergy_in for the total absorbed power\nupdate_thermal_force! for thermal recoil effects from this emission\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.explicit_euler!-Tuple{SingleAsteroidThermoPhysicalModel, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.explicit_euler!","text":"explicit_euler!(stpm::SingleAsteroidTPM, Δt)\n\nSolve the 1D heat conduction equation using the explicit (forward) Euler method. This method is conditionally stable and requires careful time step selection.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\nΔt::Real : Time step [s]\n\nMethod Properties\n\nTime discretization: Explicit (forward difference)\nAccuracy: First-order in time, second-order in space\nStability: Conditionally stable, requires λ = αΔt/Δz² < 0.5\n\nDiscretization\n\nThe heat conduction equation ∂T/∂t = α∂²T/∂z² is discretized as:\n\nT[i,n+1] = T[i,n] + λ(T[i+1,n] - 2T[i,n] + T[i-1,n])\n\nwhere:\n\nλ = αΔt/Δz² is the dimensionless time step\nα = k/(ρCₚ) is the thermal diffusivity\nn is the time index, i is the depth index\n\nStability Criterion\n\nThe method is stable only when λ < 0.5. If this condition is violated, an error is thrown.\n\nBoundary Conditions\n\nUpper boundary: Determined by update_upper_temperature!\nLower boundary: Determined by update_lower_temperature!\n\nPerformance Notes\n\nThis method is simple and fast but requires small time steps for stability\nConsider using implicit methods for larger time steps\n\nErrors\n\nThrows an error if λ ≥ 0.5 (stability violation)\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.export_TPM_results-Tuple{Any, AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModelResult}","page":"API Reference","title":"AsteroidThermoPhysicalModels.export_TPM_results","text":"export_TPM_results(dirpath, result::BinaryAsteroidThermoPhysicalModelResult)\n\nExport the result of BinaryAsteroidThermoPhysicalModel to CSV files.  The output files are saved in the following directory structure:\n\ndirpath\n├── pri\n│   ├── physical_quantities.csv\n│   ├── subsurface_temperature.csv\n│   ├── surface_temperature.csv\n│   └── thermal_force.csv\n└── sec\n    ├── physical_quantities.csv\n    ├── subsurface_temperature.csv\n    ├── surface_temperature.csv\n    └── thermal_force.csv\n\nArguments\n\ndirpath : Path to the directory to save CSV files.\nresult  : Output data format for BinaryAsteroidThermoPhysicalModel\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.export_TPM_results-Tuple{Any, AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModelResult}","page":"API Reference","title":"AsteroidThermoPhysicalModels.export_TPM_results","text":"export_TPM_results(dirpath, result::SingleAsteroidThermoPhysicalModelResult)\n\nExport the result of SingleAsteroidThermoPhysicalModel to CSV files.  The output files are saved in the following directory structure:\n\ndirpath\n├── physical_quantities.csv\n├── subsurface_temperature.csv\n├── surface_temperature.csv\n└── thermal_force.csv\n\nArguments\n\ndirpath : Path to the directory to save CSV files.\nresult  : Output data format for SingleAsteroidThermoPhysicalModel\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.implicit_euler!-Tuple{SingleAsteroidThermoPhysicalModel, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.implicit_euler!","text":"implicit_euler!(stpm::SingleAsteroidTPM, Δt)\n\nSolve the 1D heat conduction equation using the implicit (backward) Euler method. This method is unconditionally stable, allowing for larger time steps than explicit methods.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\nΔt::Real : Time step [s]\n\nMethod Properties\n\nTime discretization: Implicit (backward difference)\nAccuracy: First-order in time, second-order in space\nStability: Unconditionally stable for any time step size\n\nDiscretization\n\nThe heat conduction equation ∂T/∂t = α∂²T/∂z² is discretized as:\n\nT[i,n+1] - T[i,n] = λ(T[i+1,n+1] - 2T[i,n+1] + T[i-1,n+1])\n\nThis leads to a tridiagonal system:\n\n-λT[i-1,n+1] + (1+2λ)T[i,n+1] - λT[i+1,n+1] = T[i,n]\n\nwhere λ = αΔt/Δz²\n\nSolution Method\n\nThe resulting tridiagonal system is solved using the Thomas algorithm (tridiagonal matrix algorithm) for each face.\n\nBoundary Conditions\n\nDifferent boundary conditions modify the tridiagonal matrix:\n\nRadiation BC: Special treatment after solving the system\nInsulation BC: Modified coefficients at boundaries\nIsothermal BC: Direct temperature assignment\n\nAdvantages\n\nUnconditionally stable - no restriction on time step size\nAllows for larger time steps compared to explicit methods\nMore computationally intensive per step but often faster overall\n\nSee Also\n\ntridiagonal_matrix_algorithm! for the solution algorithm\nupdate_upper_temperature!, update_lower_temperature! for boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.init_temperature!-Tuple{BinaryAsteroidThermoPhysicalModel, Real}","page":"API Reference","title":"AsteroidThermoPhysicalModels.init_temperature!","text":"init_temperature!(btpm::BinaryTBinaryAsteroidThermoPhysicalModelPM, T₀::Real)\n\nInitialize all temperature cells at the given temperature T₀\n\nArguments\n\nbtpm : Thermophysical model for a binary asteroid\nT₀   : Initial temperature of all cells [K]\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.init_temperature!-Tuple{SingleAsteroidThermoPhysicalModel, Real}","page":"API Reference","title":"AsteroidThermoPhysicalModels.init_temperature!","text":"init_temperature!(stpm::SingleAsteroidThermoPhysicalModel, T₀::Real)\n\nInitialize all temperature cells at the given temperature T₀\n\nArguments\n\nstpm : Thermophysical model for a single asteroid\nT₀   : Initial temperature of all cells [K]\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.mutual_heating!-Tuple{BinaryAsteroidThermoPhysicalModel, Any, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.mutual_heating!","text":"mutual_heating!(btpm::BinaryAsteroidTPM, rₛ, R₂₁)\n\nCalculate the mutual heating between the primary and secondary asteroids.\n\nArguments\n\nbtpm : Thermophysical model for a binary asteroid\nrₛ   : Position of the secondary relative to the primary (NOT normalized)\nR₂₁  : Rotation matrix from secondary to primary\n\nTODO\n\nNeed to consider local horizon?\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.mutual_shadowing!-Tuple{BinaryAsteroidThermoPhysicalModel, Any, Any, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.mutual_shadowing!","text":"mutual_shadowing!(btpm::BinaryAsteroidTPM, r☉, rₛ, R₂₁)\n\nDetect eclipse events between the primary and secondary, and update the solar fluxes of the faces.\n\nArguments\n\nbtpm : Thermophysical model for a binary asteroid\nr☉   : Position of the sun relative to the primary       (NOT normalized)\nrₛ   : Position of the secondary relative to the primary (NOT normalized)\nR₂₁  : Rotation matrix from secondary to primary\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.run_TPM!-Tuple{BinaryAsteroidThermoPhysicalModel, Any, Vector{Float64}, Vector{Int64}, Vector{Int64}}","page":"API Reference","title":"AsteroidThermoPhysicalModels.run_TPM!","text":"run_TPM!(btpm::BinaryAsteroidThermoPhysicalModel, ephem, savepath)\n\nRun TPM for a binary asteroid.\n\nArguments\n\nbtpm          : Thermophysical model for a binary asteroid\nephem         : Ephemerides\ntime : Ephemeris times\nsun1 : Sun's position in the primary's frame\nsun2 : Sun's position in the secondary's frame\nsec  : Secondary's position in the primary's frame\nP2S  : Rotation matrix from primary to secondary frames\nS2P  : Rotation matrix from secondary to primary frames\ntimes_to_save : Timesteps to save temperature\nface_ID_pri   : Face indices where to save subsurface termperature for the primary\nface_ID_sec   : Face indices where to save subsurface termperature for the secondary\n\nKeyword arguments\n\nshow_progress : Flag to show the progress meter\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.run_TPM!-Tuple{SingleAsteroidThermoPhysicalModel, Any, Vector{Float64}, Vector{Int64}}","page":"API Reference","title":"AsteroidThermoPhysicalModels.run_TPM!","text":"run_TPM!(stpm::SingleAsteroidThermoPhysicalModel, ephem, times_to_save, face_ID; show_progress=true) -> result\n\nExecute the thermophysical model simulation for a single asteroid over the specified time period.\n\nArguments\n\nstpm::SingleAsteroidThermoPhysicalModel : Thermophysical model containing shape, thermal parameters, and state\nephem : Ephemerides data structure containing:\ntime::Vector{Float64} : Time points for the simulation [s]\nsun::Vector{SVector{3}} : Sun's position vectors in the asteroid-fixed frame (not normalized) [m]\ntimes_to_save::Vector{Float64} : Specific time points at which to save detailed temperature data [s]\nface_ID::Vector{Int} : Face indices for which to save subsurface temperature profiles\n\nKeyword Arguments\n\nshow_progress::Bool=true : Display progress meter during simulation\n\nReturns\n\nresult::SingleAsteroidThermoPhysicalModelResult : Structure containing:\nTime series of energy balance (Ein, Eout)\nThermal forces and torques at each time step\nSurface temperatures at specified save times\nSubsurface temperature profiles for selected faces\n\nAlgorithm\n\nFor each time step:\nUpdate solar flux based on sun position\nCalculate scattered light flux (if self-heating enabled)\nCalculate thermal radiation flux (if self-heating enabled)\nCompute thermal forces and torques\nSave results if at a save point\nUpdate temperature distribution for next step\n\nExample\n\n# Setup ephemerides\nephem = (\n    time = collect(0:60:86400),  # One day, 1-minute steps\n    sun = [SVector(au2m, 0.0, 0.0) for _ in 1:1441]  # Sun at 1 AU\n)\n\n# Run simulation\ntimes_to_save = [0.0, 21600.0, 43200.0, 64800.0, 86400.0]  # Every 6 hours\nface_ID = [1, 100, 500]  # Save subsurface data for these faces\nresult = run_TPM!(stpm, ephem, times_to_save, face_ID)\n\n# Check energy balance\nprintln(\"Final E_out/E_in ratio: \", result.E_out[end]/result.E_in[end])\n\nPerformance Notes\n\nComputation time scales with number of faces and time steps\nSelf-shadowing and self-heating calculations add significant overhead\nConsider using larger time steps if thermal inertia is low\n\nSee Also\n\ninit_temperature! to set initial conditions\nexport_TPM_results to save results to files\nupdate_temperature! for the core temperature update algorithm\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.subsolar_temperature-Tuple{Any, AsteroidThermoPhysicalModels.AbstractThermoParams}","page":"API Reference","title":"AsteroidThermoPhysicalModels.subsolar_temperature","text":"subsolar_temperature(r☉, R_vis, ε) -> Tₛₛ\nsubsolar_temperature(r☉, params::AbstractThermoParams) -> Tₛₛ\n\nCalculate the subsolar temperature on an asteroid at a given heliocentric distance.\n\nArguments\n\nr☉::Vector                   : Sun's position vector in the asteroid's fixed frame [m]\nR_vis::Real                  : Visible light reflectance (albedo) [-]\nε::Real                      : Emissivity [-]\nparams::AbstractThermoParams : Thermal parameters (alternative input)\n\nReturns\n\nTₛₛ::Float64 : Subsolar point temperature [K]\n\nMathematical Formula\n\nAssuming radiative equilibrium with zero thermal conductivity (zero thermal inertia):\n\nT_ss = leftfrac(1 - R_vis) Phi_odotvarepsilon sigmaright^14\n\nwhere:\n\nPhi_odot = Phi_0  r^2 is the solar flux at distance r [au]\nPhi_0 = 1366 W/m² is the solar constant at 1 au\nsigma is the Stefan-Boltzmann constant\n\nNotes\n\nThis gives the maximum temperature for a non-rotating asteroid\nActual subsolar temperature may be lower due to thermal inertia\nValid for airless bodies with negligible heat conduction\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.surface_temperature-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.surface_temperature","text":"surface_temperature(stpm::SingleAsteroidThermoPhysicalModel) -> T_surface\n\nExtract the surface temperature values for all faces of the asteroid.\n\nArguments\n\nstpm::SingleAsteroidThermoPhysicalModel : Thermophysical model for a single asteroid\n\nReturns\n\nT_surface::Vector{Float64} : Surface temperature for each face [K]\n\nNotes\n\nReturns temperatures from the uppermost layer (index 1) of the temperature matrix\nThe length of the returned vector equals the number of faces in the shape model\nUseful for visualization, thermal emission calculations, and analysis\n\nExample\n\nT_surf = surface_temperature(stpm)\nT_mean = mean(T_surf)  # Average surface temperature\nT_max = maximum(T_surf)  # Hottest point\nT_min = minimum(T_surf)  # Coldest point\n\nSee Also\n\nstpm.temperature for the full temperature matrix including subsurface\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.thermal_diffusivity-Tuple{Any, Any, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.thermal_diffusivity","text":"thermal_diffusivity(k, ρ, Cp) -> α\n\nCalculate the thermal diffusivity of a material.\n\nArguments\n\nk::Real  : Thermal conductivity [W/m/K]\nρ::Real  : Material density [kg/m³]\nCₚ::Real : Heat capacity [J/kg/K]\n\nReturns\n\nα::Real : Thermal diffusivity [m²/s]\n\nMathematical Formula\n\nalpha = frackrho C_p\n\nPhysical Meaning\n\nMeasures how quickly temperature propagates through material\nAppears in the heat diffusion equation: ∂T/∂t = α∇²T\nHigh α: rapid heat diffusion\nLow α: slow heat diffusion\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.thermal_inertia-Tuple{Any, Any, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.thermal_inertia","text":"thermal_inertia(k, ρ, Cp) -> Γ\n\nCalculate the thermal inertia of a material.\n\nArguments\n\nk::Real  : Thermal conductivity [W/m/K]\nρ::Real  : Material density [kg/m³]\nCₚ::Real : Heat capacity [J/kg/K]\n\nReturns\n\nΓ::Real : Thermal inertia [J m⁻² K⁻¹ s⁻¹/²]\n\nMathematical Formula\n\nGamma = sqrtk rho C_p\n\nPhysical Meaning\n\nMeasures resistance to temperature change\nHigh Γ: slow temperature response (rock-like)\nLow Γ: rapid temperature response (dust-like)\nTypical values: 50-2500 J m⁻² K⁻¹ s⁻¹/² for a planetary surface\n\nNote\n\nThe unit is sometimes called \"tiu\" (thermal inertia unit).\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.thermal_radiance-Tuple{AsteroidShapeModels.ShapeModel, AbstractVector{<:Real}, AbstractVector{<:Real}, StaticArraysCore.StaticArray{Tuple{3}, <:Real, 1}}","page":"API Reference","title":"AsteroidThermoPhysicalModels.thermal_radiance","text":"thermal_radiance(shape, emissivities, temperatures, obs) -> L\n\nCalculate the radiance from the temperature distribution based on a shape model.\n\nArguments\n\nshape        : Shape model of an asteroid\nemissivities : Emissivity of each facet of the shape model [-]\ntemperatures : Temperature of each facet of the shape model [K]\nobs          : Position vector of the observer in the same coordinate system as shape [m]\n\nReturn\n\nL : Radiance [W/m²]\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.thermal_skin_depth-NTuple{4, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.thermal_skin_depth","text":"thermal_skin_depth(P, k, ρ, Cp) -> l_2π\n\nCalculate the thermal skin depth for a periodic temperature variation.\n\nArguments\n\nP::Real  : Period of thermal cycle [s]\nk::Real  : Thermal conductivity [W/m/K]\nρ::Real  : Material density [kg/m³]\nCₚ::Real : Heat capacity [J/kg/K]\n\nReturns\n\nl_2π::Real : Thermal skin depth [m]\n\nMathematical Formula\n\nThe thermal skin depth is defined as:\n\nl_2pi = sqrtfrac4pi P krho C_p\n\nPhysical Meaning\n\nRepresents the e-folding depth of temperature variations\nTemperature amplitude decreases by factor e^(-2π) ≈ 0.0019 at this depth\nUseful for determining computational domain depth\n\nReference\n\nRozitis & Green (2011), MNRAS 415, 2042-2062\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.tridiagonal_matrix_algorithm!-NTuple{5, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.tridiagonal_matrix_algorithm!","text":"tridiagonal_matrix_algorithm!(a, b, c, d, x)\ntridiagonal_matrix_algorithm!(stpm::SingleAsteroidThermoPhysicalModel)\n\nTridiagonal matrix algorithm to solve the heat conduction equation by the implicit (backward) Euler and Crank-Nicolson methods.\n\n| b₁ c₁ 0  ⋯  0   | | x₁ |   | d₁ |\n| a₂ b₂ c₂ ⋯  0   | | x₂ |   | d₂ |\n| 0  a₃ b₃ ⋯  0   | | x₃ | = | d₃ |\n| ⋮  ⋮  ⋮  ⋱  cₙ₋₁| | ⋮  |   | ⋮  |\n| 0  0  0  aₙ bₙ  | | xₙ |   | dₙ |\n\nReferences\n\nhttps://en.wikipedia.org/wiki/Tridiagonalmatrixalgorithm\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_TPM_result!-Tuple{AsteroidThermoPhysicalModels.BinaryAsteroidThermoPhysicalModelResult, BinaryAsteroidThermoPhysicalModel, Integer}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_TPM_result!","text":"update_TPM_result!(result::BinaryAsteroidThermoPhysicalModelResult, btpm::BinaryAsteroidThermoPhysicalModel, ephem, i_time::Integer)\n\nSave the results of TPM at the time step i_time to result.\n\nArguments\n\nresult : Output data format for BinaryAsteroidThermoPhysicalModel\nbtpm   : Thermophysical model for a binary asteroid\nephem  : Ephemerides\ni_time     : Time step\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_TPM_result!-Tuple{AsteroidThermoPhysicalModels.SingleAsteroidThermoPhysicalModelResult, SingleAsteroidThermoPhysicalModel, Integer}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_TPM_result!","text":"update_TPM_result!(result::SingleAsteroidThermoPhysicalModelResult, stpm::SingleAsteroidThermoPhysicalModel, i_time::Integer)\n\nSave the results of TPM at the time step i_time to result.\n\nArguments\n\nresult : Output data format for SingleAsteroidThermoPhysicalModel\nstpm   : Thermophysical model for a single asteroid\ni_time : Time step to save data\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_flux_rad_single!-Tuple{BinaryAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_flux_rad_single!","text":"update_flux_rad_single!(btpm::BinaryAsteroidTPM)\n\nUpdate flux of absorption of thermal radiation from surrounding surface. Single radiation-absorption is only considered, assuming albedo is close to zero at thermal infrared wavelength.\n\nArguments\n\nbtpm : Thermophysical model for a binary asteroid\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_flux_rad_single!-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_flux_rad_single!","text":"update_flux_rad_single!(stpm::SingleAsteroidTPM)\n\nUpdate flux of absorption of thermal radiation from surrounding surface. Single radiation-absorption is only considered, assuming albedo is close to zero at thermal infrared wavelength.\n\nArguments\n\nstpm : Thermophysical model for a single asteroid\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_flux_scat_single!-Tuple{BinaryAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_flux_scat_single!","text":"update_flux_scat_single!(btpm::BinaryAsteroidTPM)\n\nUpdate flux of scattered sunlight, only considering single scattering.\n\nArguments\n\nbtpm : Thermophysical model for a binary asteroid\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_flux_scat_single!-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_flux_scat_single!","text":"update_flux_scat_single!(stpm::SingleAsteroidTPM)\n\nUpdate flux of scattered sunlight, only considering single scattering.\n\nArguments\n\nstpm : Thermophysical model for a single asteroid\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_flux_sun!-Tuple{BinaryAsteroidThermoPhysicalModel, StaticArraysCore.StaticArray{Tuple{3}, T, 1} where T, StaticArraysCore.StaticArray{Tuple{3}, T, 1} where T}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_flux_sun!","text":"update_flux_sun!(btpm::BinaryAsteroidTPM, r☉₁::StaticVector{3}, r☉₂::StaticVector{3})\n\nUpdate solar irradiation flux on both components of a binary asteroid system.\n\nArguments\n\nbtpm::BinaryAsteroidTPM : Thermophysical model for a binary asteroid\nr☉₁::StaticVector{3} : Sun's position vector in the primary's body-fixed frame [m]\nr☉₂::StaticVector{3} : Sun's position vector in the secondary's body-fixed frame [m]\n\nNotes\n\nEach component's solar flux is calculated independently using its own Sun vector.\nThe vectors should account for the different orientations of the two bodies.\nMutual shadowing between components is handled separately by mutual_shadowing!.\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_flux_sun!-Tuple{SingleAsteroidThermoPhysicalModel, StaticArraysCore.StaticArray{Tuple{3}, T, 1} where T, Real}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_flux_sun!","text":"update_flux_sun!(stpm::SingleAsteroidTPM, r̂☉::StaticVector{3}, F☉::Real)\n\nUpdate the direct solar irradiation flux on every face of the asteroid.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\nr̂☉::StaticVector{3} : Unit vector pointing toward the Sun in body-fixed frame\nF☉::Real : Solar flux at the asteroid's location [W/m²]\n\nAlgorithm\n\nFor each face, the solar flux is calculated as:\n\nF_sun = F☉ × max(0, n̂ · r̂☉)\n\nwhere n̂ is the face normal. If SELF_SHADOWING is enabled, the function also checks whether each face is shadowed by other parts of the asteroid using ray-casting.\n\nNotes\n\nFaces with negative dot product (facing away from Sun) receive zero flux\nShadowed faces (when SELF_SHADOWING = true) also receive zero flux\nThe input solar direction r̂☉ is normalized internally for safety\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_flux_sun!-Tuple{SingleAsteroidThermoPhysicalModel, StaticArraysCore.StaticArray{Tuple{3}, T, 1} where T}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_flux_sun!","text":"update_flux_sun!(stpm::SingleAsteroidTPM, r☉::StaticVector{3})\n\nUpdate solar irradiation flux on every face using the Sun's position vector.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\nr☉::StaticVector{3} : Position vector from asteroid to Sun in body-fixed frame [m]\n\nAlgorithm\n\nCalculates the solar flux using the inverse square law: \nNormalizes the Sun direction vector\nCalls the main update_flux_sun! function with computed values\n\nNotes\n\nThe input vector r☉ should be in meters\nSolar flux is automatically computed from the solar constant and distance\nThis is a convenience function that handles flux calculation\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_lower_temperature!-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_lower_temperature!","text":"update_lower_temperature!(stpm::SingleAsteroidTPM)\n\nUpdate the temperature at the lower boundary (deepest layer) based on the boundary condition.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\n\nBoundary Conditions\n\nThe function applies one of the following boundary conditions at the bottom of the computational domain:\n\nInsulation (Neumann): ∂T/∂z = 0\nNo heat flux through the lower boundary\nTemperature gradient is zero: T[end] = T[end-1]\nMost commonly used for asteroid modeling\nIsothermal (Dirichlet): T = T_iso\nFixed temperature at the lower boundary\nUsed when deep interior temperature is known\nT[end] = stpm.BC_LOWER.T_iso\n\nNotes\n\nThis function is called after solving the heat conduction equation\nFor explicit Euler method, it directly updates the temperature vector\nThe lower boundary should be deep enough that the chosen condition doesn't affect surface temperatures\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_surface_temperature!-Tuple{AbstractVector, Vararg{Float64, 6}}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_surface_temperature!","text":"update_surface_temperature!(T::AbstractVector, F_abs::Real, k::Real, ρ::Real, Cₚ::Real, ε::Real, Δz::Real)\n\nNewton's method to update the surface temperature under radiation boundary condition.\n\nArguments\n\nT       : 1-D array of temperatures\nF_abs   : Total energy flux absorbed by the facet\nk       : Thermal conductivity [W/m/K]\nρ       : Density [kg/m³]\nCₚ      : Heat capacity [J/kg/K]\nε       : Emissivity [-]\nΔz      : Depth step width [m]\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_temperature!-Tuple{BinaryAsteroidThermoPhysicalModel, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_temperature!","text":"update_temperature!(btpm::BinaryAsteroidTPM, Δt)\n\nCalculate the temperature for the next time step based on 1D heat conductivity equation.\n\nArguments\n\nbtpm : Thermophysical model for a binary asteroid\nΔt   : Time step [sec]\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_temperature!-Tuple{SingleAsteroidThermoPhysicalModel, Any}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_temperature!","text":"update_temperature!(stpm::SingleAsteroidTPM, Δt)\n\nUpdate the temperature distribution for the next time step by solving the 1D heat conduction equation. The solver method is determined by stpm.SOLVER, and special handling is applied for zero conductivity.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\nΔt::Real : Time step [s]\n\nSolver Selection\n\nThe function automatically selects the appropriate solver based on stpm.SOLVER:\n\nExplicitEulerSolver: Forward Euler method (conditionally stable, requires λ < 0.5)\nImplicitEulerSolver: Backward Euler method (unconditionally stable)\nCrankNicolsonSolver: Crank-Nicolson method (unconditionally stable, second-order accurate)\n\nSpecial Cases\n\nIf thermal conductivity is zero, calls update_temperature_zero_conductivity! instead\nThe zero-conductivity case uses instantaneous radiative equilibrium\n\nMathematical Background\n\nSolves the 1D heat conduction equation:\n\n∂T/∂t = α ∂²T/∂z²\n\nwhere α = k/(ρCₚ) is the thermal diffusivity.\n\nSee Also\n\nexplicit_euler!, implicit_euler!, crank_nicolson! for specific solver implementations\nupdate_temperature_zero_conductivity! for the zero-conductivity case\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_temperature_zero_conductivity!-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_temperature_zero_conductivity!","text":"update_temperature_zero_conductivity!(stpm::SingleAsteroidTPM)\n\nUpdate surface temperature for the zero thermal conductivity case. When thermal conductivity is zero, there is no heat conduction into the subsurface, and the surface temperature is determined solely by instantaneous radiative equilibrium.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\n\nMathematical Formula\n\nFor each face, the surface temperature T is calculated from:\n\nεσT⁴ = (1-Rᵥᵢₛ)F_sun + (1-Rᵥᵢₛ)F_scat + (1-Rᵢᵣ)F_rad\n\nwhere:\n\nε : Emissivity\nσ : Stefan-Boltzmann constant\nRᵥᵢₛ : Reflectance in visible light\nRᵢᵣ : Reflectance in thermal infrared\nF_sun : Direct solar flux\nF_scat : Scattered light flux\nF_rad : Thermal radiation flux from surrounding surfaces\n\nNotes\n\nThis function is called when stpm.thermo_params.thermal_conductivity is zero\nThe temperature instantly adjusts to balance incoming and outgoing radiation\nNo subsurface temperatures are updated (only surface layer)\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_thermal_force!-Tuple{BinaryAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_thermal_force!","text":"update_thermal_force!(btpm::BinaryAsteroidTPM)\n\nCalculate the thermal force and torque on every face and integrate them over all faces.\n\nArguments\n\nbtpm : Thermophysical model for a binary asteroid\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_thermal_force!-Tuple{SingleAsteroidThermoPhysicalModel}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_thermal_force!","text":"update_thermal_force!(stpm::SingleAsteroidTPM)\n\nCalculate the thermal recoil force (Yarkovsky effect) and torque (YORP effect) on the asteroid by integrating photon momentum from thermal emission and reflection over all surface facets.\n\nArguments\n\nstpm::SingleAsteroidTPM : Thermophysical model for a single asteroid\n\nPhysics\n\nThe function calculates non-gravitational effects caused by anisotropic photon emission:\n\nYarkovsky effect: Net force due to thermal lag causing asymmetric emission\nYORP effect: Net torque changing the asteroid's rotation state\n\nAlgorithm\n\nFor each facet i, the thermal force is computed as:\n\nF_i = -(2/3) × (E_i × A_i)/c × n̂_i + Σⱼ (E_i × A_i)/c × f_ij × d̂_ij\n\nwhere:\n\nE_i = total emittance from facet i (reflection + thermal emission) [W/m²]\nA_i = area of facet i [m²]\nc = speed of light [m/s]\nn̂_i = outward normal vector of facet i\nf_ij = view factor from facet i to j\nd̂_ij = unit vector from facet i to j\n\nThe first term represents direct photon recoil normal to the surface. The second term accounts for photons intercepted by other facets (self-heating contribution).\n\nOutputs (stored in stpm)\n\nstpm.face_forces : Thermal force vector on each facet [N]\nstpm.force : Total thermal force in body-fixed frame [N]\nstpm.torque : Total thermal torque in body-fixed frame [N⋅m]\n\nPhysical Significance\n\nThe force causes orbital drift (Yarkovsky effect)\nThe torque changes rotation period and obliquity (YORP effect)\nBoth effects are crucial for asteroid orbital evolution\n\nReferences\n\nBottke Jr, W. F., et al. (2006). The Yarkovsky and YORP effects\nRozitis, B., & Green, S. F. (2012). The influence of rough surface thermal-infrared beaming\n\n\n\n\n\n","category":"method"},{"location":"api/#AsteroidThermoPhysicalModels.update_upper_temperature!-Tuple{SingleAsteroidThermoPhysicalModel, Integer}","page":"API Reference","title":"AsteroidThermoPhysicalModels.update_upper_temperature!","text":"update_upper_temperature!(stpm::SingleAsteroidTPM, i::Integer)\n\nUpdate the temperature of the upper surface based on the boundary condition stpm.BC_UPPER.\n\nArguments\n\nstpm : Thermophysical model for a single asteroid\ni    : Index of the face of the shape model\n\n\n\n\n\n","category":"method"},{"location":"physical_model/#Physical-Model","page":"Physical model","title":"Physical Model","text":"","category":"section"},{"location":"physical_model/#Overview","page":"Physical model","title":"Overview","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"AsteroidThermoPhysicalModels.jl is a comprehensive toolkit for thermophysical modeling of asteroids. This package allows you to simulate the temperature distribution on an asteroid, and predict the non-gravitational force (i.e., Yarkovsky and YORP effects).","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"The thermophysical model (TPM) considers the following physical processes:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"Heat Conduction: Solves a one-dimensional heat conduction equation to model heat transfer from the surface into the interior of the asteroid.\nSelf-Shadowing: Accounts for local shadows cast by topography.\nSelf-Heating: Considers re-absorption of scattered light and thermal radiation from surrounding surfaces.\nMutual Shadowing: For a binary asteroid, accounts for eclipses between the primary and secondary bodies.\nMutual Heating: For a binary asteroid, considers thermal exchange between the primary and secondary bodies.","category":"page"},{"location":"physical_model/#Heat-Conduction-Equation","page":"Physical model","title":"Heat Conduction Equation","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"Heat conduction within the asteroid is modeled by the following one-dimensional heat diffusion equation:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"rho C_p fracpartial Tpartial t = k fracpartial^2 Tpartial z^2","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"where:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"T(zt) is the temperature at depth z and time t\nrho is the density\nC_p is the specific heat capacity at constant pressure\nk is the thermal conductivity","category":"page"},{"location":"physical_model/#Numerical-Solvers","page":"Physical model","title":"Numerical Solvers","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"AsteroidThermoPhysicalModels.jl provides three numerical methods to solve the heat conduction equation:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"Explicit Euler Method (ExplicitEulerSolver)\nForward difference in time\nConditionally stable: requires lambda = alpha Delta t  Delta z^2  05\nFirst-order accurate in time\nFast for small time steps\nImplicit Euler Method (ImplicitEulerSolver)\nBackward difference in time\nUnconditionally stable for any time step\nFirst-order accurate in time\nRequires solving a tridiagonal system\nCrank-Nicolson Method (CrankNicolsonSolver)\nAverage of forward and backward differences\nUnconditionally stable\nSecond-order accurate in both time and space\nBest balance of accuracy and stability","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"The solver can be specified when creating the thermophysical model:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"# Example: Using Crank-Nicolson solver\nstpm = SingleAsteroidTPM(shape, thermo_params;\n   SELF_SHADOWING = true,\n   SELF_HEATING   = true,\n   SOLVER         = AsteroidThermoPhysicalModels.CrankNicolsonSolver(thermo_params),\n   BC_UPPER       = AsteroidThermoPhysicalModels.RadiationBoundaryCondition(),\n   BC_LOWER       = AsteroidThermoPhysicalModels.InsulationBoundaryCondition(),\n)","category":"page"},{"location":"physical_model/#Boundary-Conditions","page":"Physical model","title":"Boundary Conditions","text":"","category":"section"},{"location":"physical_model/#Upper-Boundary-Condition-(Surface)","page":"Physical model","title":"Upper Boundary Condition (Surface)","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"At the surface, a radiative equilibrium boundary condition is applied:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"-k fracpartial Tpartial zbigg_z=0 = (1-R_textvis)(F_textsun + F_textscat) + (1-R_textir)F_textrad - varepsilon sigma T^4","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"where:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"The left side represents the heat flux from the surface into the interior\nThe right side represents the energy balance at the surface (absorbed solar radiation, scattered light, and thermal radiation minus emitted thermal radiation)","category":"page"},{"location":"physical_model/#Lower-Boundary-Condition","page":"Physical model","title":"Lower Boundary Condition","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"At the lower boundary, an insulation condition is typically applied:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"fracpartial Tpartial zbigg_z=z_textmax = 0","category":"page"},{"location":"physical_model/#Thermal-Inertia","page":"Physical model","title":"Thermal Inertia","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"Thermal inertia is a physical quantity that represents the ability of a material to resist temperature changes, defined by:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"Gamma = sqrtk rho C_p","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"The unit is tiu (thermal inertia unit) or J·m⁻²·K⁻¹·s⁻¹/².","category":"page"},{"location":"physical_model/#Thermal-Skin-Depth","page":"Physical model","title":"Thermal Skin Depth","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"The thermal skin depth is a characteristic length that represents how far a periodic thermal wave penetrates into a material:","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"l = sqrtfrac4pi P krho C_p","category":"page"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"where P is the period of the thermal cycle (typically the rotation period of the asteroid).","category":"page"},{"location":"physical_model/#Non-Gravitational-Effects","page":"Physical model","title":"Non-Gravitational Effects","text":"","category":"section"},{"location":"physical_model/#Yarkovsky-Effect","page":"Physical model","title":"Yarkovsky Effect","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"The Yarkovsky effect is an orbital perturbation caused by the asymmetric thermal emission resulting from the day-night temperature difference due to the asteroid's rotation. This effect primarily affects the semi-major axis of the asteroid's orbit.","category":"page"},{"location":"physical_model/#YORP-Effect","page":"Physical model","title":"YORP Effect","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"The YORP effect (Yarkovsky-O'Keefe-Radzievskii-Paddack effect) is a rotational perturbation resulting from thermal emission due to the asymmetric shape of the asteroid. This effect influences the rotation rate and the orientation of the asteroid's spin axis.","category":"page"},{"location":"physical_model/#Symbols","page":"Physical model","title":"Symbols","text":"","category":"section"},{"location":"physical_model/","page":"Physical model","title":"Physical model","text":"Symbol Unit Description\nt mathrms Time\nT mathrmK Temperature\nR_textvis text- Reflectance for visible light\nR_textir text- Reflectance for thermal infrared\nF_textsun mathrmWm^2 Flux of direct sunlight\nF_textscat mathrmWm^2 Flux of scattered light\nF_textrad mathrmWm^2 Flux of thermal radiation from surrounding surface\nrho mathrmkgm^3 Density\nC_p mathrmJK Heat capacity at constant pressure\nP mathrms Rotation period\nl mathrmm Thermal skin depth\nk mathrmW(m cdot K) Thermal conductivity\nz mathrmm Depth\nE mathrmJ Emittance energy\nGamma mathrmtiu = mathrmJ cdot m^-2 cdot K^-1 cdot s^-12 Thermal inertia (cf. Thermal inertia SI unit proposal)\nvarepsilon text- Emissivity\nPhi mathrmWm^2 Solar energy flux\nsigma_textSB mathrmW(m^2 cdot K^4) Stefan-Boltzmann constant","category":"page"},{"location":"examples/#Usage-Examples","page":"Usage Examples","title":"Usage Examples","text":"","category":"section"},{"location":"examples/","page":"Usage Examples","title":"Usage Examples","text":"This section provides detailed examples of how to use AsteroidThermoPhysicalModels.jl for various scenarios. For more detailed examples, please refer to the Astroshaper-examples repository.","category":"page"},{"location":"examples/#Single-Asteroid-Example-(Ryugu)","page":"Usage Examples","title":"Single Asteroid Example (Ryugu)","text":"","category":"section"},{"location":"examples/","page":"Usage Examples","title":"Usage Examples","text":"This example demonstrates how to set up and run a thermophysical model for asteroid Ryugu using SPICE kernels for ephemerides.","category":"page"},{"location":"examples/","page":"Usage Examples","title":"Usage Examples","text":"using AsteroidShapeModels\nusing AsteroidThermoPhysicalModels\nusing Downloads\nusing LinearAlgebra\nusing Rotations\nusing SPICE\nusing StaticArrays\n\n##= Download Files =##\npaths_kernel = [\n    \"lsk/naif0012.tls\",\n    \"pck/hyb2_ryugu_shape_v20190328.tpc\",\n    \"fk/hyb2_ryugu_v01.tf\",\n    \"spk/2162173_Ryugu.bsp\",\n]\npaths_shape = [\n    \"SHAPE_SFM_49k_v20180804.obj\",\n]\n\nfor path_kernel in paths_kernel\n    url_kernel = \"https://data.darts.isas.jaxa.jp/pub/hayabusa2/old/2020/spice_bundle/spice_kernels/$(path_kernel)\"\n    filepath = joinpath(\"kernel\", path_kernel)\n    mkpath(dirname(filepath))\n    isfile(filepath) || Downloads.download(url_kernel, filepath)\nend\n\nfor path_shape in paths_shape\n    url_shape = \"https://data.darts.isas.jaxa.jp/pub/hayabusa2/paper/Watanabe_2019/$(path_shape)\"\n    filepath = joinpath(\"shape\", path_shape)\n    mkpath(dirname(filepath))\n    isfile(filepath) || Downloads.download(url_shape, filepath)\nend\n\n##= Load data with SPICE =##\nfor path_kernel in paths_kernel\n    filepath = joinpath(\"kernel\", path_kernel)\n    SPICE.furnsh(filepath)\nend\n\n##= Ephemerides =##\nP = SPICE.convrt(7.63262, \"hours\", \"seconds\")  # Rotation period of Ryugu\n\nn_cycle = 2  # Number of cycles to perform TPM\nn_step_in_cycle = 72  # Number of time steps in one rotation period\n\net_begin = SPICE.utc2et(\"2018-07-01T00:00:00\")  # Start time of TPM\net_end   = et_begin + P * n_cycle  # End time of TPM\net_range = range(et_begin, et_end; length=n_step_in_cycle*n_cycle+1)\n\n\"\"\"\n- `time` : Ephemeris times\n- `sun`  : Sun's position in the RYUGU_FIXED frame\n\"\"\"\nephem = (\n    time = collect(et_range),\n    sun  = [SVector{3}(SPICE.spkpos(\"SUN\", et, \"RYUGU_FIXED\", \"None\", \"RYUGU\")[1]) * 1000 for et in et_range],\n)\n\nSPICE.kclear()\n\n##= Load obj file =##\npath_obj = joinpath(\"shape\", \"SHAPE_SFM_49k_v20180804.obj\")\n    \nshape = load_shape_obj(path_obj; scale=1000, with_face_visibility=true)\nn_face = length(shape.faces)  # Number of faces\n\n##= Thermal properties =##\nk  = 0.1     # Thermal conductivity [W/m/K]\nρ  = 1270.0  # Density [kg/m³]\nCₚ = 600.0   # Heat capacity [J/kg/K]\n    \nl = AsteroidThermoPhysicalModels.thermal_skin_depth(P, k, ρ, Cₚ)  # Thermal skin depth [m]\nΓ = AsteroidThermoPhysicalModels.thermal_inertia(k, ρ, Cₚ)        # Thermal inertia [tiu]\n\nR_vis = 0.04  # Reflectance in visible light [-]\nR_ir  = 0.0   # Reflectance in thermal infrared [-]\nε     = 1.0   # Emissivity [-]\n\nz_max = 0.6   # Depth of the lower boundary of a heat conduction equation [m]\nn_depth = 41  # Number of depth steps\nΔz = z_max / (n_depth - 1)  # Depth step width [m]\n\nthermo_params = AsteroidThermoPhysicalModels.ThermoParams(P, l, Γ, R_vis, R_ir, ε, z_max, Δz, n_depth)\n\n##= Setting of TPM =##\nstpm = AsteroidThermoPhysicalModels.SingleAsteroidTPM(shape, thermo_params;\n    SELF_SHADOWING = true,\n    SELF_HEATING   = true,\n    SOLVER         = AsteroidThermoPhysicalModels.CrankNicolsonSolver(thermo_params),\n    BC_UPPER       = AsteroidThermoPhysicalModels.RadiationBoundaryCondition(),\n    BC_LOWER       = AsteroidThermoPhysicalModels.InsulationBoundaryCondition(),\n)\nAsteroidThermoPhysicalModels.init_temperature!(stpm, 200)\n\n##= Run TPM =##\ntimes_to_save = ephem.time[end-n_step_in_cycle:end]  # Save temperature during the final rotation\nface_ID = [1, 2, 3, 4, 10]  # Face indices to save subsurface temperature\n\nresult = AsteroidThermoPhysicalModels.run_TPM!(stpm, ephem, times_to_save, face_ID)\nAsteroidThermoPhysicalModels.export_TPM_results(\"path/to/save\", result)","category":"page"},{"location":"examples/#Binary-Asteroid-Example-(Didymos-Dimorphos)","page":"Usage Examples","title":"Binary Asteroid Example (Didymos-Dimorphos)","text":"","category":"section"},{"location":"examples/","page":"Usage Examples","title":"Usage Examples","text":"This example demonstrates how to set up and run a thermophysical model for the binary asteroid system Didymos-Dimorphos using SPICE kernels for ephemerides.","category":"page"},{"location":"examples/","page":"Usage Examples","title":"Usage Examples","text":"using AsteroidShapeModels\nusing AsteroidThermoPhysicalModels\nusing Downloads\nusing LinearAlgebra\nusing Rotations\nusing SPICE\nusing StaticArrays\n\n##= SPICE kernels =##\npaths_kernel = [\n    \"fk/hera_v10.tf\",\n    \"lsk/naif0012.tls\",\n    \"pck/hera_didymos_v06.tpc\",\n    \"spk/de432s.bsp\",\n    \"spk/didymos_hor_000101_500101_v01.bsp\",\n    \"spk/didymos_gmv_260901_311001_v01.bsp\",\n]\n\n##= Shape models =##\npaths_shape = [\n    \"g_50677mm_rad_obj_didy_0000n00000_v001.obj\",\n    \"g_08438mm_lgt_obj_dimo_0000n00000_v002.obj\",\n]\n\n##= Download SPICE kernels =##\nfor path_kernel in paths_kernel\n    url_kernel = \"https://s2e2.cosmos.esa.int/bitbucket/projects/SPICE_KERNELS/repos/hera/raw/kernels/$(path_kernel)?at=refs%2Ftags%2Fv161_20230929_001\"\n    filepath = joinpath(\"kernel\", path_kernel)\n    mkpath(dirname(filepath))\n    isfile(filepath) || Downloads.download(url_kernel, filepath)\nend\n\n##= Download shape models =##\nfor path_shape in paths_shape\n    url_kernel = \"https://s2e2.cosmos.esa.int/bitbucket/projects/SPICE_KERNELS/repos/hera/raw/kernels/dsk/$(path_shape)?at=refs%2Ftags%2Fv161_20230929_001\"\n    filepath = joinpath(\"shape\", path_shape)\n    mkpath(dirname(filepath))\n    isfile(filepath) || Downloads.download(url_kernel, filepath)\nend\n\n##= Load the SPICE kernels =##\nfor path_kernel in paths_kernel\n    filepath = joinpath(\"kernel\", path_kernel)\n    SPICE.furnsh(filepath)\nend\n\n##= Ephemerides =##\nP₁ = SPICE.convrt(2.2593, \"hours\", \"seconds\")  # Rotation period of Didymos\nP₂ = SPICE.convrt(11.93 , \"hours\", \"seconds\")  # Rotation period of Dimorphos\n\nn_cycle = 2  # Number of cycles to perform TPM\nn_step_in_cycle = 72  # Number of time steps in one rotation period\n\net_begin = SPICE.utc2et(\"2027-02-18T00:00:00\")  # Start time of TPM\net_end   = et_begin + P₂ * n_cycle  # End time of TPM\net_range = range(et_begin, et_end; length=n_step_in_cycle*n_cycle+1)\n\n\"\"\"\n- `time` : Ephemeris times\n- `sun1` : Sun's position in the primary's frame (DIDYMOS_FIXED)\n- `sun2` : Sun's position in the secondary's frame (DIMORPHOS_FIXED)\n- `sec`  : Secondary's position in the primary's frame (DIDYMOS_FIXED)\n- `P2S`  : Rotation matrix from primary to secondary frames\n- `S2P`  : Rotation matrix from secondary to primary frames\n\"\"\"\nephem = (\n    time = collect(et_range),\n    sun1 = [SVector{3}(SPICE.spkpos(\"SUN\"      , et, \"DIDYMOS_FIXED\"  , \"None\", \"DIDYMOS\"  )[1]) * 1000 for et in et_range],\n    sun2 = [SVector{3}(SPICE.spkpos(\"SUN\"      , et, \"DIMORPHOS_FIXED\", \"None\", \"DIMORPHOS\")[1]) * 1000 for et in et_range],\n    sec  = [SVector{3}(SPICE.spkpos(\"DIMORPHOS\", et, \"DIDYMOS_FIXED\"  , \"None\", \"DIDYMOS\"  )[1]) * 1000 for et in et_range],\n    P2S  = [RotMatrix{3}(SPICE.pxform(\"DIDYMOS_FIXED\"  , \"DIMORPHOS_FIXED\", et)) for et in et_range],\n    S2P  = [RotMatrix{3}(SPICE.pxform(\"DIMORPHOS_FIXED\", \"DIDYMOS_FIXED\"  , et)) for et in et_range],\n)\n\nSPICE.kclear()\n\n##= Load the shape models =##\npath_shape1_obj = joinpath(\"shape\", \"g_50677mm_rad_obj_didy_0000n00000_v001.obj\")\npath_shape2_obj = joinpath(\"shape\", \"g_08438mm_lgt_obj_dimo_0000n00000_v002.obj\")\n    \nshape1 = load_shape_obj(path_shape1_obj; scale=1000, with_face_visibility=true)\nshape2 = load_shape_obj(path_shape2_obj; scale=1000, with_face_visibility=true)\n\nn_face_shape1 = length(shape1.faces)  # Number of faces of Didymos\nn_face_shape2 = length(shape2.faces)  # Number of faces of Dimorphos\n    \n##= Thermal properties of Didymos & Dimorphos [cf. Michel+2016; Naidu+2020] =##\nk  = 0.125   # Thermal conductivity [W/m/K]\nρ  = 2170.0  # Density [kg/m³]\nCₚ = 600.0   # Heat capacity [J/kg/K]\n\nl₁ = AsteroidThermoPhysicalModels.thermal_skin_depth(P₁, k, ρ, Cₚ)  # Thermal skin depth for Didymos\nl₂ = AsteroidThermoPhysicalModels.thermal_skin_depth(P₂, k, ρ, Cₚ)  # Thermal skin depth for Dimorphos\nΓ = AsteroidThermoPhysicalModels.thermal_inertia(k, ρ, Cₚ)          # Thermal inertia for Didymos and Dimorphos [tiu]\n\nR_vis = 0.059  # Reflectance in visible light [-]\nR_ir  = 0.0    # Reflectance in thermal infrared [-]\nε     = 0.9    # Emissivity [-]\n\nz_max = 0.6   # Depth of the lower boundary of a heat conduction equation [m]\nn_depth = 41  # Number of depth steps\nΔz = z_max / (n_depth - 1)  # Depth step width [m]\n\nthermo_params1 = AsteroidThermoPhysicalModels.ThermoParams(P₁, l₁, Γ, R_vis, R_ir, ε, z_max, Δz, n_depth)\nthermo_params2 = AsteroidThermoPhysicalModels.ThermoParams(P₂, l₂, Γ, R_vis, R_ir, ε, z_max, Δz, n_depth)\n\n##= Setting of TPM =##\nstpm1 = AsteroidThermoPhysicalModels.SingleAsteroidTPM(shape1, thermo_params1;\n    SELF_SHADOWING = true,\n    SELF_HEATING   = true,\n    SOLVER         = AsteroidThermoPhysicalModels.CrankNicolsonSolver(thermo_params1),\n    BC_UPPER       = AsteroidThermoPhysicalModels.RadiationBoundaryCondition(),\n    BC_LOWER       = AsteroidThermoPhysicalModels.InsulationBoundaryCondition(),\n)\n\nstpm2 = AsteroidThermoPhysicalModels.SingleAsteroidTPM(shape2, thermo_params2;\n    SELF_SHADOWING = true,\n    SELF_HEATING   = true,\n    SOLVER         = AsteroidThermoPhysicalModels.CrankNicolsonSolver(thermo_params2),\n    BC_UPPER       = AsteroidThermoPhysicalModels.RadiationBoundaryCondition(),\n    BC_LOWER       = AsteroidThermoPhysicalModels.InsulationBoundaryCondition(),\n)\n\nbtpm  = AsteroidThermoPhysicalModels.BinaryAsteroidTPM(stpm1, stpm2; MUTUAL_SHADOWING=true, MUTUAL_HEATING=true)\nAsteroidThermoPhysicalModels.init_temperature!(btpm, 200.)\n    \n##= Run TPM =##\ntimes_to_save = ephem.time[end-n_step_in_cycle:end]  # Save temperature during the final rotation\nface_ID_pri = [1, 2, 3, 4, 10]  # Face indices to save subsurface temperature of the primary\nface_ID_sec = [1, 2, 3, 4, 20]  # Face indices to save subsurface temperature of the secondary\n\nresult = AsteroidThermoPhysicalModels.run_TPM!(btpm, ephem, times_to_save, face_ID_pri, face_ID_sec)\nAsteroidThermoPhysicalModels.export_TPM_results(\"path/to/save\", result)","category":"page"},{"location":"examples/#Analyzing-Results","page":"Usage Examples","title":"Analyzing Results","text":"","category":"section"},{"location":"examples/","page":"Usage Examples","title":"Usage Examples","text":"After running the TPM, you can analyze the results to understand the thermal behavior of the asteroid and its non-gravitational effects.","category":"page"},{"location":"examples/","page":"Usage Examples","title":"Usage Examples","text":"# Access physical quantities\nresult.times  # Time steps for thermophysical modeling [s]\nresult.E_in   # Input energy per second on the whole surface [W]\nresult.E_out  # Output energy per second from the whole surface [W]\nresult.force  # Thermal force on the asteroid at the body-fixed frame [N]\nresult.torque # Thermal torque on the asteroid at the body-fixed frame [N ⋅ m]\n\n# For a binary asteroid, you can access the results of the primary and secondary as follows:\nresult.pri.force  # Thermal force on the primary body at the body-fixed frame [N]\nresult.sec.force  # Thermal force on the secondary body at the body-fixed frame [N]\n\n# Access surface temperature [K]\n# A matrix in size of `(n_face, n_time)`\n# - `n_face` : Number of faces of the shape model\n# - `n_time` : Number of time steps to save surface temperature\nresult.surface_temperature\n\n# Access subsurface temperatures [K]\n# As a function of depth [m] and time [s], `Dict` with face ID as key and a matrix `(n_depth, n_time)` as an entry.\n# - `n_depth` : The number of the depth nodes\n# - `n_time`  : The number of time steps to save temperature\nresult.subsurface_temperature[2]  # Subsurface temperature for face ID 2","category":"page"},{"location":"#AsteroidThermoPhysicalModels.jl","page":"Introduction","title":"AsteroidThermoPhysicalModels.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"AsteroidThermoPhysicalModels.jl is a comprehensive Julia-based toolkit for thermophysical modeling (TPM) of asteroids. It allows you to simulate the temperature distribution of asteroids and predict non-gravitational perturbations on their dynamics. Sample notebooks are available in Astroshaper-examples.","category":"page"},{"location":"#Getting-Started","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To install AsteroidThermoPhysicalModels.jl, use Julia's package manager:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(url=\"https://github.com/Astroshaper/AsteroidThermoPhysicalModels.jl\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you'd like to install a specific version, you can add the version number:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(url=\"https://github.com/Astroshaper/AsteroidThermoPhysicalModels.jl#0.0.6\") ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Then, load the package:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using AsteroidThermoPhysicalModels","category":"page"},{"location":"#Update-and-Test","page":"Introduction","title":"Update and Test","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To update the package and run tests:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pkg.update(\"AsteroidThermoPhysicalModels\")\nPkg.test(\"AsteroidThermoPhysicalModels\")","category":"page"},{"location":"#TPM-Workflow","page":"Introduction","title":"TPM Workflow","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A thermophysical simulation follows this general workflow:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Set up the environment:\nDefine ephemerides of the target asteroid(s)\nLoad a shape model(s)\nSet thermophysical parameters\nConfigure the TPM model:\nChoose a solver for the heat conduction equation\nSet boundary conditions\nInitialize temperature distribution\nRun the simulation:\nExecute the TPM calculation\nExport results\nAnalyze the results:\nProcess temperature distributions\nCalculate non-gravitational effects","category":"page"},{"location":"#Basic-Usage-Example","page":"Introduction","title":"Basic Usage Example","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Here's a simple example of setting up and running a thermophysical model for a single asteroid:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using AsteroidThermoPhysicalModels\n\n# Load shape model\nshape = load_shape_obj(\"asteroid_shape.obj\"; scale=1000, with_face_visibility=true)\n\n# Set thermal parameters\nP = 8.0 * 3600  # Rotation period [s]\nl = 0.05         # Thermal skin depth [m]\nΓ = 200.0        # Thermal inertia [J m⁻² K⁻¹ s⁻¹/²]\nR_vis = 0.1      # Reflectance in visible light [-]\nR_ir = 0.0       # Reflectance in thermal infrared [-]\nε = 0.9          # Emissivity [-]\nz_max = 0.5      # Depth of lower boundary [m]\nn_depth = 41     # Number of depth steps\nΔz = z_max / (n_depth - 1)  # Depth step width [m]\n\nthermo_params = ThermoParams(P, l, Γ, R_vis, R_ir, ε, z_max, Δz, n_depth)\n\n# Create TPM model\nstpm = SingleAsteroidThermoPhysicalModel(shape, thermo_params;\n    SELF_SHADOWING = true,\n    SELF_HEATING = true,\n    SOLVER = ForwardEulerSolver(thermo_params),\n    BC_UPPER = RadiationBoundaryCondition(),\n    BC_LOWER = InsulationBoundaryCondition()\n)\n\n# Initialize temperature\ninit_temperature!(stpm, 200.0)  # Initial temperature [K]\n\n# Define ephemerides (simplified example)\nn_steps = 72\ntimes = range(0.0, P; length=n_steps)\nsun_positions = [normalize([cos(2π*t/P), sin(2π*t/P), 0.0]) * 1.5e11 for t in times]\n\nephem = (time = collect(times), sun = sun_positions)\n\n# Define which timesteps to save detailed data for\ntimes_to_save = times[end-10:end]  # Save last 10 timesteps\nface_ID = [1, 2, 3]  # Save subsurface temperature for these faces\n\n# Run TPM\nresult = run_TPM!(stpm, ephem, times_to_save, face_ID)\n\n# Export results\nexport_TPM_results(\"output_directory\", result)","category":"page"},{"location":"#Output-Files","page":"Introduction","title":"Output Files","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"After running the simulation, you will get the following output files. Note that the thermal force and torque are calculated in the asteroid-fixed frame.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"physical_quantities.csv\ntime     : Time steps [s]\nE_in     : Input energy per second on the whole surface [W]\nE_out    : Output energy per second from the whole surface [W]\nE_cons   : Energy conservation ratio [-], ratio of total energy going out to total energy coming in during the last rotation cycle\nforce_x  : x-component of the thermal force [N]\nforce_y  : y-component of the thermal force [N]\nforce_z  : z-component of the thermal force [N]\ntorque_x : x-component of the thermal torque [N·m]\ntorque_y : y-component of the thermal torque [N·m]\ntorque_z : z-component of the thermal torque [N·m]\nsubsurface_temperature.csv : Temperature [K] as a function of depth [m] and time [s]\nsurface_temperature.csv : Surface temperature of every face [K] as a function of time [s]\nthermal_force.csv : Thermal force on every face of the shape model [N] as a function of time","category":"page"},{"location":"#Binary-Asteroid-Systems","page":"Introduction","title":"Binary Asteroid Systems","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"AsteroidThermoPhysicalModels.jl also supports thermophysical modeling of binary asteroid systems. The package can account for mutual shadowing (eclipses) and mutual heating between the primary and secondary bodies.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Example setup for a binary asteroid system:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"# Create TPM models for primary and secondary\nprimary_tpm = SingleAsteroidThermoPhysicalModel(shape_primary, thermo_params_primary; ...)\nsecondary_tpm = SingleAsteroidThermoPhysicalModel(shape_secondary, thermo_params_secondary; ...)\n\n# Create binary TPM model\nbtpm = BinaryAsteroidThermoPhysicalModel(primary_tpm, secondary_tpm;\n    MUTUAL_SHADOWING = true,\n    MUTUAL_HEATING = true\n)\n\n# Run TPM for binary system\nresult = run_TPM!(btpm, binary_ephem, times_to_save, face_ID_pri, face_ID_sec)","category":"page"},{"location":"#Non-Gravitational-Effects","page":"Introduction","title":"Non-Gravitational Effects","text":"","category":"section"},{"location":"#Yarkovsky-Effect","page":"Introduction","title":"Yarkovsky Effect","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The Yarkovsky effect is an orbital perturbation caused by the asymmetric thermal radiation resulting from thermal inertia. This effect primarily affects the semi-major axis of the asteroid's orbit. The thermal force calculated by the TPM can be used to determine the magnitude and direction of the Yarkovsky effect on the asteroid's orbit. You should note that the output force is calculated in the asteroid-fixed frame, so you need to transform it to the inertial frame.","category":"page"},{"location":"#YORP-Effect","page":"Introduction","title":"YORP Effect","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The YORP effect (Yarkovsky–O'Keefe–Radzievskii–Paddack effect) is a rotational perturbation resulting from thermal radiation due to the asymmetric shape of the asteroid. This effect influences the rotation rate and the orientation of the asteroid's spin axis. The thermal torque calculated by the TPM can be used to determine the magnitude and direction of the YORP effect on the asteroid's rotation. You should note that the output torque is calculated in the asteroid-fixed frame, so you need to transform it to the inertial frame.","category":"page"},{"location":"#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"For more details on the package development and the thermophysical model, refer to the following references:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Kanamaru et al. (2024) - Thermophysical Model Development for Hera Mission to Simulate Non-Gravitational Acceleration on Binary Asteroid\n金丸ほか (2024) - 二重小惑星探査計画Heraに向けた小惑星熱物理モデルの開発 (in Japanese)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The package contributes the following publications:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Kanamaru et al. (2021) - YORP Effect on Asteroid 162173 Ryugu: Implications for the Dynamical History\nZhou et al. (2024) - The Yarkovsky Effect on the Long-term Evolution of Binary Asteroids","category":"page"}]
}
